
Exercises_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002810  08002810  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002810  08002810  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002810  08002810  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000078  08002890  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002890  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000976c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2c  00000000  00000000  0002980d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f4e  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c033  00000000  00000000  000436fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082386  00000000  00000000  0004f731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1ab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000d1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d4 	.word	0x080027d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080027d4 	.word	0x080027d4

0800014c <display7SEG>:
int seg_pin[] = {a_Pin, b_Pin, c_Pin, d_Pin, e_Pin, f_Pin, g_Pin};
int seg_config[10] = {0x01, 0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00, 0x04};
// Hexadecimal to Binary: 0x01->0x00000001, 0x4F->01001111, ...

void display7SEG(int num)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	GPIOB->ODR = seg_config[num];
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <display7SEG+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <display7SEG+0x24>)
 800015e:	60da      	str	r2, [r3, #12]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000000 	.word	0x20000000
 8000170:	40010c00 	.word	0x40010c00

08000174 <update7SEG>:

const int MAX_LED = 4;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b03      	cmp	r3, #3
 8000180:	d82a      	bhi.n	80001d8 <update7SEG+0x64>
 8000182:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <update7SEG+0x14>)
 8000184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000188:	08000199 	.word	0x08000199
 800018c:	080001a9 	.word	0x080001a9
 8000190:	080001b9 	.word	0x080001b9
 8000194:	080001c9 	.word	0x080001c9
    switch (index)
    {
        case 0:
            //Display the first 7SEG with led_buffer[0]
    		display7SEG(led_buffer[index]);
 8000198:	4a15      	ldr	r2, [pc, #84]	; (80001f0 <update7SEG+0x7c>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f7ff ffd3 	bl	800014c <display7SEG>
            break;
 80001a6:	e018      	b.n	80001da <update7SEG+0x66>
        case 1:
            //Display the second 7SEG with led_buffer[1]
    		display7SEG(led_buffer[index]);
 80001a8:	4a11      	ldr	r2, [pc, #68]	; (80001f0 <update7SEG+0x7c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f7ff ffcb 	bl	800014c <display7SEG>
            break;
 80001b6:	e010      	b.n	80001da <update7SEG+0x66>
        case 2:
            //Display the third 7SEG with led_buffer[2]
    		display7SEG(led_buffer[index]);
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <update7SEG+0x7c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <display7SEG>
            break;
 80001c6:	e008      	b.n	80001da <update7SEG+0x66>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
    		display7SEG(led_buffer[index]);
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <update7SEG+0x7c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <display7SEG>
            break;
 80001d6:	e000      	b.n	80001da <update7SEG+0x66>
        default:
            break;
 80001d8:	bf00      	nop
    }
	if(seg_index >= 4) seg_index = 0;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <update7SEG+0x80>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	dd02      	ble.n	80001e8 <update7SEG+0x74>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <update7SEG+0x80>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000094 	.word	0x20000094

080001f8 <updateBufferForMode1>:

void updateBufferForMode1()
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	int Hori_Road = (Current_Timer_Counter(0)) / 100;
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 febe 	bl	8000f80 <Current_Timer_Counter>
 8000204:	4603      	mov	r3, r0
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <updateBufferForMode1+0xa0>)
 8000208:	fb82 1203 	smull	r1, r2, r2, r3
 800020c:	1152      	asrs	r2, r2, #5
 800020e:	17db      	asrs	r3, r3, #31
 8000210:	1ad3      	subs	r3, r2, r3
 8000212:	607b      	str	r3, [r7, #4]
	int Verti_road = (Current_Timer_Counter(1)) / 100;
 8000214:	2001      	movs	r0, #1
 8000216:	f000 feb3 	bl	8000f80 <Current_Timer_Counter>
 800021a:	4603      	mov	r3, r0
 800021c:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <updateBufferForMode1+0xa0>)
 800021e:	fb82 1203 	smull	r1, r2, r2, r3
 8000222:	1152      	asrs	r2, r2, #5
 8000224:	17db      	asrs	r3, r3, #31
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	603b      	str	r3, [r7, #0]

	led_buffer[0] = (Hori_Road + 1)/ 10;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <updateBufferForMode1+0xa4>)
 8000230:	fb82 1203 	smull	r1, r2, r2, r3
 8000234:	1092      	asrs	r2, r2, #2
 8000236:	17db      	asrs	r3, r3, #31
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <updateBufferForMode1+0xa8>)
 800023c:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (Hori_Road + 1) % 10;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	1c59      	adds	r1, r3, #1
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <updateBufferForMode1+0xa4>)
 8000244:	fb83 2301 	smull	r2, r3, r3, r1
 8000248:	109a      	asrs	r2, r3, #2
 800024a:	17cb      	asrs	r3, r1, #31
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	1aca      	subs	r2, r1, r3
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <updateBufferForMode1+0xa8>)
 800025a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = (Verti_road + 1) / 10;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	3301      	adds	r3, #1
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <updateBufferForMode1+0xa4>)
 8000262:	fb82 1203 	smull	r1, r2, r2, r3
 8000266:	1092      	asrs	r2, r2, #2
 8000268:	17db      	asrs	r3, r3, #31
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <updateBufferForMode1+0xa8>)
 800026e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = (Verti_road + 1) % 10;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	1c59      	adds	r1, r3, #1
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <updateBufferForMode1+0xa4>)
 8000276:	fb83 2301 	smull	r2, r3, r3, r1
 800027a:	109a      	asrs	r2, r3, #2
 800027c:	17cb      	asrs	r3, r1, #31
 800027e:	1ad2      	subs	r2, r2, r3
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	1aca      	subs	r2, r1, r3
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <updateBufferForMode1+0xa8>)
 800028c:	60da      	str	r2, [r3, #12]
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	51eb851f 	.word	0x51eb851f
 800029c:	66666667 	.word	0x66666667
 80002a0:	20000028 	.word	0x20000028

080002a4 <updateBufferForIncVal>:

void updateBufferForIncVal()
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	led_buffer[2] = count_val / 10;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <updateBufferForIncVal+0x74>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <updateBufferForIncVal+0x78>)
 80002ae:	fb82 1203 	smull	r1, r2, r2, r3
 80002b2:	1092      	asrs	r2, r2, #2
 80002b4:	17db      	asrs	r3, r3, #31
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002ba:	6093      	str	r3, [r2, #8]
	led_buffer[3] = count_val % 10;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <updateBufferForIncVal+0x74>)
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <updateBufferForIncVal+0x78>)
 80002c2:	fb83 2301 	smull	r2, r3, r3, r1
 80002c6:	109a      	asrs	r2, r3, #2
 80002c8:	17cb      	asrs	r3, r1, #31
 80002ca:	1ad2      	subs	r2, r2, r3
 80002cc:	4613      	mov	r3, r2
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	4413      	add	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	1aca      	subs	r2, r1, r3
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002d8:	60da      	str	r2, [r3, #12]

	led_buffer[0] = 0;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
	switch(mode)
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <updateBufferForIncVal+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b0c      	cmp	r3, #12
 80002e6:	d00e      	beq.n	8000306 <updateBufferForIncVal+0x62>
 80002e8:	2b0c      	cmp	r3, #12
 80002ea:	dc10      	bgt.n	800030e <updateBufferForIncVal+0x6a>
 80002ec:	2b0a      	cmp	r3, #10
 80002ee:	d002      	beq.n	80002f6 <updateBufferForIncVal+0x52>
 80002f0:	2b0b      	cmp	r3, #11
 80002f2:	d004      	beq.n	80002fe <updateBufferForIncVal+0x5a>
			break;
		case MODE_4:
			led_buffer[1] = 4;
			break;
		default:
			break;
 80002f4:	e00b      	b.n	800030e <updateBufferForIncVal+0x6a>
			led_buffer[1] = 2;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <updateBufferForIncVal+0x7c>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
			break;
 80002fc:	e008      	b.n	8000310 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 3;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <updateBufferForIncVal+0x7c>)
 8000300:	2203      	movs	r2, #3
 8000302:	605a      	str	r2, [r3, #4]
			break;
 8000304:	e004      	b.n	8000310 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 4;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <updateBufferForIncVal+0x7c>)
 8000308:	2204      	movs	r2, #4
 800030a:	605a      	str	r2, [r3, #4]
			break;
 800030c:	e000      	b.n	8000310 <updateBufferForIncVal+0x6c>
			break;
 800030e:	bf00      	nop
	}
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000098 	.word	0x20000098
 800031c:	66666667 	.word	0x66666667
 8000320:	20000028 	.word	0x20000028
 8000324:	20000048 	.word	0x20000048

08000328 <fsmIncVal>:

void fsmIncVal()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	switch (mode)
 800032c:	4b9d      	ldr	r3, [pc, #628]	; (80005a4 <fsmIncVal+0x27c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	d067      	beq.n	8000404 <fsmIncVal+0xdc>
 8000334:	2b0f      	cmp	r3, #15
 8000336:	f300 8095 	bgt.w	8000464 <fsmIncVal+0x13c>
 800033a:	2b0d      	cmp	r3, #13
 800033c:	d002      	beq.n	8000344 <fsmIncVal+0x1c>
 800033e:	2b0e      	cmp	r3, #14
 8000340:	d030      	beq.n	80003a4 <fsmIncVal+0x7c>
				if (count_val > 99) count_val = 0;
				count_val++;
			}
			break;
		default:
			break;
 8000342:	e08f      	b.n	8000464 <fsmIncVal+0x13c>
			LEDsBlink();
 8000344:	f000 fa9c 	bl	8000880 <LEDsBlink>
			updateBufferForIncVal();
 8000348:	f7ff ffac 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 800034c:	2000      	movs	r0, #0
 800034e:	f000 faeb 	bl	8000928 <isButtonPressed>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <fsmIncVal+0x36>
				mode = MODE_3;
 8000358:	4b92      	ldr	r3, [pc, #584]	; (80005a4 <fsmIncVal+0x27c>)
 800035a:	220b      	movs	r2, #11
 800035c:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 800035e:	2002      	movs	r0, #2
 8000360:	f000 fae2 	bl	8000928 <isButtonPressed>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d009      	beq.n	800037e <fsmIncVal+0x56>
				mode = MODE_2;
 800036a:	4b8e      	ldr	r3, [pc, #568]	; (80005a4 <fsmIncVal+0x27c>)
 800036c:	220a      	movs	r2, #10
 800036e:	601a      	str	r2, [r3, #0]
				RED = count_val * 100;
 8000370:	4b8d      	ldr	r3, [pc, #564]	; (80005a8 <fsmIncVal+0x280>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2264      	movs	r2, #100	; 0x64
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	4a8c      	ldr	r2, [pc, #560]	; (80005ac <fsmIncVal+0x284>)
 800037c:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 800037e:	2001      	movs	r0, #1
 8000380:	f000 fad2 	bl	8000928 <isButtonPressed>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d06e      	beq.n	8000468 <fsmIncVal+0x140>
				if (count_val > 99) count_val = 0;
 800038a:	4b87      	ldr	r3, [pc, #540]	; (80005a8 <fsmIncVal+0x280>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b63      	cmp	r3, #99	; 0x63
 8000390:	dd02      	ble.n	8000398 <fsmIncVal+0x70>
 8000392:	4b85      	ldr	r3, [pc, #532]	; (80005a8 <fsmIncVal+0x280>)
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
				count_val++;
 8000398:	4b83      	ldr	r3, [pc, #524]	; (80005a8 <fsmIncVal+0x280>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a82      	ldr	r2, [pc, #520]	; (80005a8 <fsmIncVal+0x280>)
 80003a0:	6013      	str	r3, [r2, #0]
			break;
 80003a2:	e061      	b.n	8000468 <fsmIncVal+0x140>
			LEDsBlink();
 80003a4:	f000 fa6c 	bl	8000880 <LEDsBlink>
			updateBufferForIncVal();
 80003a8:	f7ff ff7c 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 fabb 	bl	8000928 <isButtonPressed>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <fsmIncVal+0x96>
				mode = MODE_4;
 80003b8:	4b7a      	ldr	r3, [pc, #488]	; (80005a4 <fsmIncVal+0x27c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 80003be:	2002      	movs	r0, #2
 80003c0:	f000 fab2 	bl	8000928 <isButtonPressed>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d009      	beq.n	80003de <fsmIncVal+0xb6>
				mode = MODE_3;
 80003ca:	4b76      	ldr	r3, [pc, #472]	; (80005a4 <fsmIncVal+0x27c>)
 80003cc:	220b      	movs	r2, #11
 80003ce:	601a      	str	r2, [r3, #0]
				AMBER = count_val * 100;
 80003d0:	4b75      	ldr	r3, [pc, #468]	; (80005a8 <fsmIncVal+0x280>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2264      	movs	r2, #100	; 0x64
 80003d6:	fb02 f303 	mul.w	r3, r2, r3
 80003da:	4a75      	ldr	r2, [pc, #468]	; (80005b0 <fsmIncVal+0x288>)
 80003dc:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 faa2 	bl	8000928 <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d040      	beq.n	800046c <fsmIncVal+0x144>
				if (count_val > 99) count_val = 0;
 80003ea:	4b6f      	ldr	r3, [pc, #444]	; (80005a8 <fsmIncVal+0x280>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b63      	cmp	r3, #99	; 0x63
 80003f0:	dd02      	ble.n	80003f8 <fsmIncVal+0xd0>
 80003f2:	4b6d      	ldr	r3, [pc, #436]	; (80005a8 <fsmIncVal+0x280>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
				count_val++;
 80003f8:	4b6b      	ldr	r3, [pc, #428]	; (80005a8 <fsmIncVal+0x280>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a6a      	ldr	r2, [pc, #424]	; (80005a8 <fsmIncVal+0x280>)
 8000400:	6013      	str	r3, [r2, #0]
			break;
 8000402:	e033      	b.n	800046c <fsmIncVal+0x144>
			LEDsBlink();
 8000404:	f000 fa3c 	bl	8000880 <LEDsBlink>
			updateBufferForIncVal();
 8000408:	f7ff ff4c 	bl	80002a4 <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fa8b 	bl	8000928 <isButtonPressed>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <fsmIncVal+0xf6>
				mode = MODE_1;
 8000418:	4b62      	ldr	r3, [pc, #392]	; (80005a4 <fsmIncVal+0x27c>)
 800041a:	2209      	movs	r2, #9
 800041c:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 800041e:	2002      	movs	r0, #2
 8000420:	f000 fa82 	bl	8000928 <isButtonPressed>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d009      	beq.n	800043e <fsmIncVal+0x116>
				mode = MODE_4;
 800042a:	4b5e      	ldr	r3, [pc, #376]	; (80005a4 <fsmIncVal+0x27c>)
 800042c:	220c      	movs	r2, #12
 800042e:	601a      	str	r2, [r3, #0]
				AMBER = count_val * 100;
 8000430:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <fsmIncVal+0x280>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2264      	movs	r2, #100	; 0x64
 8000436:	fb02 f303 	mul.w	r3, r2, r3
 800043a:	4a5d      	ldr	r2, [pc, #372]	; (80005b0 <fsmIncVal+0x288>)
 800043c:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fa72 	bl	8000928 <isButtonPressed>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d012      	beq.n	8000470 <fsmIncVal+0x148>
				if (count_val > 99) count_val = 0;
 800044a:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <fsmIncVal+0x280>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b63      	cmp	r3, #99	; 0x63
 8000450:	dd02      	ble.n	8000458 <fsmIncVal+0x130>
 8000452:	4b55      	ldr	r3, [pc, #340]	; (80005a8 <fsmIncVal+0x280>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
				count_val++;
 8000458:	4b53      	ldr	r3, [pc, #332]	; (80005a8 <fsmIncVal+0x280>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	4a52      	ldr	r2, [pc, #328]	; (80005a8 <fsmIncVal+0x280>)
 8000460:	6013      	str	r3, [r2, #0]
			break;
 8000462:	e005      	b.n	8000470 <fsmIncVal+0x148>
			break;
 8000464:	bf00      	nop
 8000466:	e004      	b.n	8000472 <fsmIncVal+0x14a>
			break;
 8000468:	bf00      	nop
 800046a:	e002      	b.n	8000472 <fsmIncVal+0x14a>
			break;
 800046c:	bf00      	nop
 800046e:	e000      	b.n	8000472 <fsmIncVal+0x14a>
			break;
 8000470:	bf00      	nop
	}

	if(RED > RED_INIT)
 8000472:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <fsmIncVal+0x284>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b4f      	ldr	r3, [pc, #316]	; (80005b4 <fsmIncVal+0x28c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	dd18      	ble.n	80004b0 <fsmIncVal+0x188>
	{
		AMBER = AMBER * (RED / RED_INIT);
 800047e:	4b4b      	ldr	r3, [pc, #300]	; (80005ac <fsmIncVal+0x284>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b4c      	ldr	r3, [pc, #304]	; (80005b4 <fsmIncVal+0x28c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	fb92 f3f3 	sdiv	r3, r2, r3
 800048a:	4a49      	ldr	r2, [pc, #292]	; (80005b0 <fsmIncVal+0x288>)
 800048c:	6812      	ldr	r2, [r2, #0]
 800048e:	fb02 f303 	mul.w	r3, r2, r3
 8000492:	4a47      	ldr	r2, [pc, #284]	; (80005b0 <fsmIncVal+0x288>)
 8000494:	6013      	str	r3, [r2, #0]
		GREEN = GREEN * (RED / RED_INIT);
 8000496:	4b45      	ldr	r3, [pc, #276]	; (80005ac <fsmIncVal+0x284>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b46      	ldr	r3, [pc, #280]	; (80005b4 <fsmIncVal+0x28c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	fb92 f3f3 	sdiv	r3, r2, r3
 80004a2:	4a45      	ldr	r2, [pc, #276]	; (80005b8 <fsmIncVal+0x290>)
 80004a4:	6812      	ldr	r2, [r2, #0]
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4a43      	ldr	r2, [pc, #268]	; (80005b8 <fsmIncVal+0x290>)
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e0a7      	b.n	8000600 <fsmIncVal+0x2d8>
	}
	else if(AMBER > AMBER_INIT)
 80004b0:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <fsmIncVal+0x288>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b41      	ldr	r3, [pc, #260]	; (80005bc <fsmIncVal+0x294>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dd18      	ble.n	80004ee <fsmIncVal+0x1c6>
	{
		RED = RED * (AMBER / AMBER_INIT);
 80004bc:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <fsmIncVal+0x288>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <fsmIncVal+0x294>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80004c8:	4a38      	ldr	r2, [pc, #224]	; (80005ac <fsmIncVal+0x284>)
 80004ca:	6812      	ldr	r2, [r2, #0]
 80004cc:	fb02 f303 	mul.w	r3, r2, r3
 80004d0:	4a36      	ldr	r2, [pc, #216]	; (80005ac <fsmIncVal+0x284>)
 80004d2:	6013      	str	r3, [r2, #0]
		GREEN = GREEN * (AMBER / AMBER_INIT);
 80004d4:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <fsmIncVal+0x288>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b38      	ldr	r3, [pc, #224]	; (80005bc <fsmIncVal+0x294>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80004e0:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <fsmIncVal+0x290>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	fb02 f303 	mul.w	r3, r2, r3
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <fsmIncVal+0x290>)
 80004ea:	6013      	str	r3, [r2, #0]
 80004ec:	e088      	b.n	8000600 <fsmIncVal+0x2d8>
	}
	else if(GREEN > GREEN_INIT)
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <fsmIncVal+0x290>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <fsmIncVal+0x298>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dd18      	ble.n	800052c <fsmIncVal+0x204>
	{
		RED = RED * (GREEN / GREEN_INIT);
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <fsmIncVal+0x290>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <fsmIncVal+0x298>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	fb92 f3f3 	sdiv	r3, r2, r3
 8000506:	4a29      	ldr	r2, [pc, #164]	; (80005ac <fsmIncVal+0x284>)
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	4a27      	ldr	r2, [pc, #156]	; (80005ac <fsmIncVal+0x284>)
 8000510:	6013      	str	r3, [r2, #0]
		AMBER = AMBER * (GREEN / GREEN_INIT);
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <fsmIncVal+0x290>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <fsmIncVal+0x298>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	fb92 f3f3 	sdiv	r3, r2, r3
 800051e:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <fsmIncVal+0x288>)
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	fb02 f303 	mul.w	r3, r2, r3
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <fsmIncVal+0x288>)
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e069      	b.n	8000600 <fsmIncVal+0x2d8>
	}
	else if(RED < RED_INIT)
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <fsmIncVal+0x284>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <fsmIncVal+0x28c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	da18      	bge.n	800056a <fsmIncVal+0x242>
	{
		AMBER = (RED / 5) * 2;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <fsmIncVal+0x284>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <fsmIncVal+0x29c>)
 800053e:	fb82 1203 	smull	r1, r2, r2, r3
 8000542:	1052      	asrs	r2, r2, #1
 8000544:	17db      	asrs	r3, r3, #31
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <fsmIncVal+0x288>)
 800054c:	6013      	str	r3, [r2, #0]
		GREEN = (RED / 5) * 3;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <fsmIncVal+0x284>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <fsmIncVal+0x29c>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1052      	asrs	r2, r2, #1
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <fsmIncVal+0x290>)
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e04a      	b.n	8000600 <fsmIncVal+0x2d8>
	}
	else if(AMBER < AMBER_INIT)
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <fsmIncVal+0x288>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <fsmIncVal+0x294>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	da28      	bge.n	80005c8 <fsmIncVal+0x2a0>
	{
		RED = (AMBER / 2) * 5;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <fsmIncVal+0x288>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	0fda      	lsrs	r2, r3, #31
 800057c:	4413      	add	r3, r2
 800057e:	105b      	asrs	r3, r3, #1
 8000580:	461a      	mov	r2, r3
 8000582:	4613      	mov	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <fsmIncVal+0x284>)
 800058a:	6013      	str	r3, [r2, #0]
		GREEN = (AMBER / 2) * 3;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <fsmIncVal+0x288>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0fda      	lsrs	r2, r3, #31
 8000592:	4413      	add	r3, r2
 8000594:	105b      	asrs	r3, r3, #1
 8000596:	461a      	mov	r2, r3
 8000598:	4613      	mov	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <fsmIncVal+0x290>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e02d      	b.n	8000600 <fsmIncVal+0x2d8>
 80005a4:	20000048 	.word	0x20000048
 80005a8:	20000098 	.word	0x20000098
 80005ac:	2000004c 	.word	0x2000004c
 80005b0:	20000050 	.word	0x20000050
 80005b4:	20000058 	.word	0x20000058
 80005b8:	20000054 	.word	0x20000054
 80005bc:	2000005c 	.word	0x2000005c
 80005c0:	20000060 	.word	0x20000060
 80005c4:	66666667 	.word	0x66666667
	}
	else if(GREEN < GREEN_INIT)
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <fsmIncVal+0x2f4>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <fsmIncVal+0x2f8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	da15      	bge.n	8000600 <fsmIncVal+0x2d8>
	{
		RED = (GREEN / 3) * 5;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <fsmIncVal+0x2f4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <fsmIncVal+0x2fc>)
 80005da:	fb82 1203 	smull	r1, r2, r2, r3
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad2      	subs	r2, r2, r3
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <fsmIncVal+0x300>)
 80005ea:	6013      	str	r3, [r2, #0]
		AMBER = (GREEN / 3) * 2;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <fsmIncVal+0x2f4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <fsmIncVal+0x2fc>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <fsmIncVal+0x304>)
 80005fe:	6013      	str	r3, [r2, #0]
	}
	RED_INIT = RED;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <fsmIncVal+0x300>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <fsmIncVal+0x308>)
 8000606:	6013      	str	r3, [r2, #0]
	AMBER_INIT = AMBER;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <fsmIncVal+0x304>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <fsmIncVal+0x30c>)
 800060e:	6013      	str	r3, [r2, #0]
	GREEN_INIT = GREEN;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <fsmIncVal+0x2f4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <fsmIncVal+0x2f8>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000054 	.word	0x20000054
 8000620:	20000060 	.word	0x20000060
 8000624:	55555556 	.word	0x55555556
 8000628:	2000004c 	.word	0x2000004c
 800062c:	20000050 	.word	0x20000050
 8000630:	20000058 	.word	0x20000058
 8000634:	2000005c 	.word	0x2000005c

08000638 <fsm_Hori_LEDs>:
int Hori_Status = AUTO_INIT;
int Verti_Status = AUTO_INIT;
GPIO_PinState Blink_Status = LED_ON;

void fsm_Hori_LEDs()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	switch(Hori_Status)
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <fsm_Hori_LEDs+0xac>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3b10      	subs	r3, #16
 8000642:	2b03      	cmp	r3, #3
 8000644:	d844      	bhi.n	80006d0 <fsm_Hori_LEDs+0x98>
 8000646:	a201      	add	r2, pc, #4	; (adr r2, 800064c <fsm_Hori_LEDs+0x14>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	0800065d 	.word	0x0800065d
 8000650:	08000671 	.word	0x08000671
 8000654:	08000691 	.word	0x08000691
 8000658:	080006b1 	.word	0x080006b1
	{
		case AUTO_INIT:
			Hori_Status = AUTO_RED;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <fsm_Hori_LEDs+0xac>)
 800065e:	2211      	movs	r2, #17
 8000660:	601a      	str	r2, [r3, #0]
			setTimer(0, RED);
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <fsm_Hori_LEDs+0xb0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fcad 	bl	8000fc8 <setTimer>
			break;
 800066e:	e036      	b.n	80006de <fsm_Hori_LEDs+0xa6>

		case AUTO_RED:
			if (IsTimerUp(0))
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fc95 	bl	8000fa0 <IsTimerUp>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d02b      	beq.n	80006d4 <fsm_Hori_LEDs+0x9c>
			{
				Hori_Status = AUTO_GREEN;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <fsm_Hori_LEDs+0xac>)
 800067e:	2212      	movs	r2, #18
 8000680:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN);
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <fsm_Hori_LEDs+0xb4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fc9d 	bl	8000fc8 <setTimer>
			}
			break;
 800068e:	e021      	b.n	80006d4 <fsm_Hori_LEDs+0x9c>

		case AUTO_GREEN:
			if (IsTimerUp(0))
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fc85 	bl	8000fa0 <IsTimerUp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01d      	beq.n	80006d8 <fsm_Hori_LEDs+0xa0>
			{
				Hori_Status = AUTO_AMBER;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <fsm_Hori_LEDs+0xac>)
 800069e:	2213      	movs	r2, #19
 80006a0:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER);
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <fsm_Hori_LEDs+0xb8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fc8d 	bl	8000fc8 <setTimer>
			}
			break;
 80006ae:	e013      	b.n	80006d8 <fsm_Hori_LEDs+0xa0>

		case AUTO_AMBER:
			if (IsTimerUp(0))
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fc75 	bl	8000fa0 <IsTimerUp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00f      	beq.n	80006dc <fsm_Hori_LEDs+0xa4>
			{
				Hori_Status = AUTO_RED;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <fsm_Hori_LEDs+0xac>)
 80006be:	2211      	movs	r2, #17
 80006c0:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <fsm_Hori_LEDs+0xb0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fc7d 	bl	8000fc8 <setTimer>
			}
			break;
 80006ce:	e005      	b.n	80006dc <fsm_Hori_LEDs+0xa4>

		default:
			break;
 80006d0:	bf00      	nop
 80006d2:	e004      	b.n	80006de <fsm_Hori_LEDs+0xa6>
			break;
 80006d4:	bf00      	nop
 80006d6:	e002      	b.n	80006de <fsm_Hori_LEDs+0xa6>
			break;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <fsm_Hori_LEDs+0xa6>
			break;
 80006dc:	bf00      	nop
	}
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000038 	.word	0x20000038
 80006e8:	2000004c 	.word	0x2000004c
 80006ec:	20000054 	.word	0x20000054
 80006f0:	20000050 	.word	0x20000050

080006f4 <fsm_Verti_LEDs>:

void fsm_Verti_LEDs()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	switch (Verti_Status)
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <fsm_Verti_LEDs+0xac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b10      	subs	r3, #16
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d844      	bhi.n	800078c <fsm_Verti_LEDs+0x98>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <fsm_Verti_LEDs+0x14>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000719 	.word	0x08000719
 800070c:	0800076d 	.word	0x0800076d
 8000710:	0800072d 	.word	0x0800072d
 8000714:	0800074d 	.word	0x0800074d
	{
		case AUTO_INIT:
			Verti_Status = AUTO_GREEN;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <fsm_Verti_LEDs+0xac>)
 800071a:	2212      	movs	r2, #18
 800071c:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN);
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <fsm_Verti_LEDs+0xb0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fc4f 	bl	8000fc8 <setTimer>
			break;
 800072a:	e036      	b.n	800079a <fsm_Verti_LEDs+0xa6>

		case AUTO_GREEN:
			if (IsTimerUp(1))
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fc37 	bl	8000fa0 <IsTimerUp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02b      	beq.n	8000790 <fsm_Verti_LEDs+0x9c>
			{
				Verti_Status = AUTO_AMBER;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <fsm_Verti_LEDs+0xac>)
 800073a:	2213      	movs	r2, #19
 800073c:	601a      	str	r2, [r3, #0]
				setTimer(1, AMBER);
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <fsm_Verti_LEDs+0xb4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fc3f 	bl	8000fc8 <setTimer>
			}
			break;
 800074a:	e021      	b.n	8000790 <fsm_Verti_LEDs+0x9c>

		case AUTO_AMBER:
			if (IsTimerUp(1))
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fc27 	bl	8000fa0 <IsTimerUp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01d      	beq.n	8000794 <fsm_Verti_LEDs+0xa0>
			{
				Verti_Status = AUTO_RED;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <fsm_Verti_LEDs+0xac>)
 800075a:	2211      	movs	r2, #17
 800075c:	601a      	str	r2, [r3, #0]
				setTimer(1, RED);
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <fsm_Verti_LEDs+0xb8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fc2f 	bl	8000fc8 <setTimer>
			}
			break;
 800076a:	e013      	b.n	8000794 <fsm_Verti_LEDs+0xa0>

		case AUTO_RED:
			if (IsTimerUp(1))
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fc17 	bl	8000fa0 <IsTimerUp>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00f      	beq.n	8000798 <fsm_Verti_LEDs+0xa4>
			{
				Verti_Status = AUTO_GREEN;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <fsm_Verti_LEDs+0xac>)
 800077a:	2212      	movs	r2, #18
 800077c:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <fsm_Verti_LEDs+0xb0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	2001      	movs	r0, #1
 8000786:	f000 fc1f 	bl	8000fc8 <setTimer>
			}
			break;
 800078a:	e005      	b.n	8000798 <fsm_Verti_LEDs+0xa4>

		default:
			break;
 800078c:	bf00      	nop
 800078e:	e004      	b.n	800079a <fsm_Verti_LEDs+0xa6>
			break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <fsm_Verti_LEDs+0xa6>
			break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <fsm_Verti_LEDs+0xa6>
			break;
 8000798:	bf00      	nop
	}
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000003c 	.word	0x2000003c
 80007a4:	20000054 	.word	0x20000054
 80007a8:	20000050 	.word	0x20000050
 80007ac:	2000004c 	.word	0x2000004c

080007b0 <LEDsDisplay>:

void LEDsDisplay()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	fsm_Hori_LEDs();
 80007b4:	f7ff ff40 	bl	8000638 <fsm_Hori_LEDs>
	fsm_Verti_LEDs();
 80007b8:	f7ff ff9c 	bl	80006f4 <fsm_Verti_LEDs>

	switch (Hori_Status)
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <LEDsDisplay+0xc4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b13      	cmp	r3, #19
 80007c2:	d011      	beq.n	80007e8 <LEDsDisplay+0x38>
 80007c4:	2b13      	cmp	r3, #19
 80007c6:	dc25      	bgt.n	8000814 <LEDsDisplay+0x64>
 80007c8:	2b11      	cmp	r3, #17
 80007ca:	d002      	beq.n	80007d2 <LEDsDisplay+0x22>
 80007cc:	2b12      	cmp	r3, #18
 80007ce:	d016      	beq.n	80007fe <LEDsDisplay+0x4e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
			break;
		default:
			break;
 80007d0:	e020      	b.n	8000814 <LEDsDisplay+0x64>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, LED_ON);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2104      	movs	r1, #4
 80007d6:	4828      	ldr	r0, [pc, #160]	; (8000878 <LEDsDisplay+0xc8>)
 80007d8:	f000 fff3 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | green1_Pin, LED_OFF);
 80007dc:	2200      	movs	r2, #0
 80007de:	2118      	movs	r1, #24
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <LEDsDisplay+0xc8>)
 80007e2:	f000 ffee 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 80007e6:	e016      	b.n	8000816 <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, LED_ON);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2108      	movs	r1, #8
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <LEDsDisplay+0xc8>)
 80007ee:	f000 ffe8 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | green1_Pin, LED_OFF);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2114      	movs	r1, #20
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <LEDsDisplay+0xc8>)
 80007f8:	f000 ffe3 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 80007fc:	e00b      	b.n	8000816 <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
 80007fe:	2201      	movs	r2, #1
 8000800:	2110      	movs	r1, #16
 8000802:	481d      	ldr	r0, [pc, #116]	; (8000878 <LEDsDisplay+0xc8>)
 8000804:	f000 ffdd 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
 8000808:	2200      	movs	r2, #0
 800080a:	210c      	movs	r1, #12
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <LEDsDisplay+0xc8>)
 800080e:	f000 ffd8 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 8000812:	e000      	b.n	8000816 <LEDsDisplay+0x66>
			break;
 8000814:	bf00      	nop
	}

	switch (Verti_Status)
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <LEDsDisplay+0xcc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b13      	cmp	r3, #19
 800081c:	d011      	beq.n	8000842 <LEDsDisplay+0x92>
 800081e:	2b13      	cmp	r3, #19
 8000820:	dc25      	bgt.n	800086e <LEDsDisplay+0xbe>
 8000822:	2b11      	cmp	r3, #17
 8000824:	d002      	beq.n	800082c <LEDsDisplay+0x7c>
 8000826:	2b12      	cmp	r3, #18
 8000828:	d016      	beq.n	8000858 <LEDsDisplay+0xa8>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
			break;
		default:
			break;
 800082a:	e020      	b.n	800086e <LEDsDisplay+0xbe>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, LED_ON);
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <LEDsDisplay+0xc8>)
 8000832:	f000 ffc6 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber2_Pin | green2_Pin, LED_OFF);
 8000836:	2200      	movs	r2, #0
 8000838:	21c0      	movs	r1, #192	; 0xc0
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <LEDsDisplay+0xc8>)
 800083c:	f000 ffc1 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 8000840:	e016      	b.n	8000870 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, LED_ON);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <LEDsDisplay+0xc8>)
 8000848:	f000 ffbb 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | green2_Pin, LED_OFF);
 800084c:	2200      	movs	r2, #0
 800084e:	21a0      	movs	r1, #160	; 0xa0
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <LEDsDisplay+0xc8>)
 8000852:	f000 ffb6 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 8000856:	e00b      	b.n	8000870 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <LEDsDisplay+0xc8>)
 800085e:	f000 ffb0 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
 8000862:	2200      	movs	r2, #0
 8000864:	2160      	movs	r1, #96	; 0x60
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <LEDsDisplay+0xc8>)
 8000868:	f000 ffab 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 800086c:	e000      	b.n	8000870 <LEDsDisplay+0xc0>
			break;
 800086e:	bf00      	nop
	}
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000038 	.word	0x20000038
 8000878:	40010800 	.word	0x40010800
 800087c:	2000003c 	.word	0x2000003c

08000880 <LEDsBlink>:

void LEDsBlink()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	if (IsTimerUp(3))
 8000884:	2003      	movs	r0, #3
 8000886:	f000 fb8b 	bl	8000fa0 <IsTimerUp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00f      	beq.n	80008b0 <LEDsBlink+0x30>
	{
		Blink_Status = !Blink_Status;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <LEDsBlink+0x98>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <LEDsBlink+0x98>)
 80008a2:	701a      	strb	r2, [r3, #0]
		setTimer(3, LED_Blink);
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <LEDsBlink+0x9c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2003      	movs	r0, #3
 80008ac:	f000 fb8c 	bl	8000fc8 <setTimer>
	}
	switch(mode)
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <LEDsBlink+0xa0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b0c      	cmp	r3, #12
 80008b6:	d020      	beq.n	80008fa <LEDsBlink+0x7a>
 80008b8:	2b0c      	cmp	r3, #12
 80008ba:	dc2b      	bgt.n	8000914 <LEDsBlink+0x94>
 80008bc:	2b0a      	cmp	r3, #10
 80008be:	d002      	beq.n	80008c6 <LEDsBlink+0x46>
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	d00d      	beq.n	80008e0 <LEDsBlink+0x60>
		case MODE_4:
			HAL_GPIO_WritePin(GPIOA, green1_Pin | green2_Pin, Blink_Status);
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | amber1_Pin | amber2_Pin, LED_OFF);
			break;
	}
}
 80008c4:	e026      	b.n	8000914 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin, Blink_Status);
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <LEDsBlink+0x98>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	2124      	movs	r1, #36	; 0x24
 80008ce:	4815      	ldr	r0, [pc, #84]	; (8000924 <LEDsBlink+0xa4>)
 80008d0:	f000 ff77 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin | green1_Pin | green2_Pin, LED_OFF);
 80008d4:	2200      	movs	r2, #0
 80008d6:	21d8      	movs	r1, #216	; 0xd8
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <LEDsBlink+0xa4>)
 80008da:	f000 ff72 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 80008de:	e019      	b.n	8000914 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin, Blink_Status);
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <LEDsBlink+0x98>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	2148      	movs	r1, #72	; 0x48
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <LEDsBlink+0xa4>)
 80008ea:	f000 ff6a 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | green1_Pin | green2_Pin, LED_OFF);
 80008ee:	2200      	movs	r2, #0
 80008f0:	21b4      	movs	r1, #180	; 0xb4
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <LEDsBlink+0xa4>)
 80008f4:	f000 ff65 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 80008f8:	e00c      	b.n	8000914 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, green1_Pin | green2_Pin, Blink_Status);
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <LEDsBlink+0x98>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	2190      	movs	r1, #144	; 0x90
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <LEDsBlink+0xa4>)
 8000904:	f000 ff5d 	bl	80017c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | amber1_Pin | amber2_Pin, LED_OFF);
 8000908:	2200      	movs	r2, #0
 800090a:	216c      	movs	r1, #108	; 0x6c
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <LEDsBlink+0xa4>)
 800090e:	f000 ff58 	bl	80017c2 <HAL_GPIO_WritePin>
			break;
 8000912:	bf00      	nop
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000040 	.word	0x20000040
 800091c:	20000068 	.word	0x20000068
 8000920:	20000048 	.word	0x20000048
 8000924:	40010800 	.word	0x40010800

08000928 <isButtonPressed>:
int button_flag[BUTTONS];
GPIO_PinState KeyReg[BUTTONS][4];
int TimeOutForKeyPress[BUTTONS];

int isButtonPressed(int button)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	if(button_flag[button] == 1)
 8000930:	4a09      	ldr	r2, [pc, #36]	; (8000958 <isButtonPressed+0x30>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d106      	bne.n	800094a <isButtonPressed+0x22>
	{
		button_flag[button] = 0;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <isButtonPressed+0x30>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2100      	movs	r1, #0
 8000942:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <isButtonPressed+0x24>
	}
	return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200000a8 	.word	0x200000a8

0800095c <getKeyInput>:

void getKeyInput(){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	for(int button = 0; button < BUTTONS; button++)
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	e0a4      	b.n	8000ab2 <getKeyInput+0x156>
	{
		KeyReg[button][0] = KeyReg[button][1];
 8000968:	4a56      	ldr	r2, [pc, #344]	; (8000ac4 <getKeyInput+0x168>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	7859      	ldrb	r1, [r3, #1]
 8000972:	4a54      	ldr	r2, [pc, #336]	; (8000ac4 <getKeyInput+0x168>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		KeyReg[button][1] = KeyReg[button][2];
 800097a:	4a52      	ldr	r2, [pc, #328]	; (8000ac4 <getKeyInput+0x168>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	7899      	ldrb	r1, [r3, #2]
 8000984:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <getKeyInput+0x168>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	460a      	mov	r2, r1
 800098e:	705a      	strb	r2, [r3, #1]
		switch(button)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d025      	beq.n	80009e2 <getKeyInput+0x86>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	dc30      	bgt.n	80009fe <getKeyInput+0xa2>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <getKeyInput+0x4e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00e      	beq.n	80009c6 <getKeyInput+0x6a>
				break;
			case BUTTON_3:
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 80009a8:	e029      	b.n	80009fe <getKeyInput+0xa2>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <getKeyInput+0x16c>)
 80009b0:	f000 fef0 	bl	8001794 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4619      	mov	r1, r3
 80009b8:	4a42      	ldr	r2, [pc, #264]	; (8000ac4 <getKeyInput+0x168>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	460a      	mov	r2, r1
 80009c2:	709a      	strb	r2, [r3, #2]
				break;
 80009c4:	e01c      	b.n	8000a00 <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80009c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ca:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <getKeyInput+0x16c>)
 80009cc:	f000 fee2 	bl	8001794 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4a3b      	ldr	r2, [pc, #236]	; (8000ac4 <getKeyInput+0x168>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	709a      	strb	r2, [r3, #2]
				break;
 80009e0:	e00e      	b.n	8000a00 <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	4838      	ldr	r0, [pc, #224]	; (8000ac8 <getKeyInput+0x16c>)
 80009e8:	f000 fed4 	bl	8001794 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <getKeyInput+0x168>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	709a      	strb	r2, [r3, #2]
				break;
 80009fc:	e000      	b.n	8000a00 <getKeyInput+0xa4>
				break;
 80009fe:	bf00      	nop
		}
		if((KeyReg[button][1] == KeyReg[button][0]) && (KeyReg[button][2] == KeyReg[button][1]))
 8000a00:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <getKeyInput+0x168>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	785a      	ldrb	r2, [r3, #1]
 8000a0a:	492e      	ldr	r1, [pc, #184]	; (8000ac4 <getKeyInput+0x168>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d14a      	bne.n	8000aac <getKeyInput+0x150>
 8000a16:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <getKeyInput+0x168>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	789a      	ldrb	r2, [r3, #2]
 8000a20:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <getKeyInput+0x168>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	440b      	add	r3, r1
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d13e      	bne.n	8000aac <getKeyInput+0x150>
		{
			if (KeyReg[button][3] != KeyReg[button][2])
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <getKeyInput+0x168>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	78da      	ldrb	r2, [r3, #3]
 8000a38:	4922      	ldr	r1, [pc, #136]	; (8000ac4 <getKeyInput+0x168>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	440b      	add	r3, r1
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d01d      	beq.n	8000a82 <getKeyInput+0x126>
			{
				KeyReg[button][3] = KeyReg[button][2];
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <getKeyInput+0x168>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	7899      	ldrb	r1, [r3, #2]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <getKeyInput+0x168>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	460a      	mov	r2, r1
 8000a5a:	70da      	strb	r2, [r3, #3]

				if (KeyReg[button][2] == PRESSED_STATE)
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <getKeyInput+0x168>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d120      	bne.n	8000aac <getKeyInput+0x150>
				{
					button_flag[button] = 1;
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <getKeyInput+0x170>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimeOutForKeyPress[button] = counterKeyPress;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <getKeyInput+0x174>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <getKeyInput+0x178>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a80:	e014      	b.n	8000aac <getKeyInput+0x150>
				}
			}
			else
			{
				TimeOutForKeyPress[button]--;
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <getKeyInput+0x178>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	4911      	ldr	r1, [pc, #68]	; (8000ad4 <getKeyInput+0x178>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[button] == 0)
 8000a94:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <getKeyInput+0x178>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d105      	bne.n	8000aac <getKeyInput+0x150>
					KeyReg[button][3] = NORMAL_STATE;
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <getKeyInput+0x168>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	70da      	strb	r2, [r3, #3]
	for(int button = 0; button < BUTTONS; button++)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	f77f af57 	ble.w	8000968 <getKeyInput+0xc>
			}
		}
	}
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000b4 	.word	0x200000b4
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	200000a8 	.word	0x200000a8
 8000ad0:	20000044 	.word	0x20000044
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <fsm_mode>:
 */

#include "fsm_mode.h"

void fsm_mode()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	switch(mode)
 8000adc:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <fsm_mode+0x160>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	f200 809e 	bhi.w	8000c24 <fsm_mode+0x14c>
 8000ae8:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <fsm_mode+0x18>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	08000b29 	.word	0x08000b29
 8000afc:	08000b75 	.word	0x08000b75
 8000b00:	08000bc1 	.word	0x08000bc1
	{
		case MODE_INIT:
			mode = MODE_1;
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <fsm_mode+0x160>)
 8000b06:	2209      	movs	r2, #9
 8000b08:	601a      	str	r2, [r3, #0]
			break;
 8000b0a:	e092      	b.n	8000c32 <fsm_mode+0x15a>

		case MODE_1:
			if (isButtonPressed(BUTTON_1))
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff ff0b 	bl	8000928 <isButtonPressed>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <fsm_mode+0x46>
				mode = MODE_2;
 8000b18:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <fsm_mode+0x160>)
 8000b1a:	220a      	movs	r2, #10
 8000b1c:	601a      	str	r2, [r3, #0]

			LEDsDisplay();
 8000b1e:	f7ff fe47 	bl	80007b0 <LEDsDisplay>
			updateBufferForMode1();
 8000b22:	f7ff fb69 	bl	80001f8 <updateBufferForMode1>
			break;
 8000b26:	e084      	b.n	8000c32 <fsm_mode+0x15a>

		case MODE_2:
			if (isButtonPressed(BUTTON_1))
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fefd 	bl	8000928 <isButtonPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <fsm_mode+0x62>
				mode = MODE_3;
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <fsm_mode+0x160>)
 8000b36:	220b      	movs	r2, #11
 8000b38:	601a      	str	r2, [r3, #0]

			LEDsBlink();
 8000b3a:	f7ff fea1 	bl	8000880 <LEDsBlink>

			count_val = RED / 100;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <fsm_mode+0x164>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a3f      	ldr	r2, [pc, #252]	; (8000c40 <fsm_mode+0x168>)
 8000b44:	fb82 1203 	smull	r1, r2, r2, r3
 8000b48:	1152      	asrs	r2, r2, #5
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <fsm_mode+0x16c>)
 8000b50:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000b52:	f7ff fba7 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fee6 	bl	8000928 <isButtonPressed>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d062      	beq.n	8000c28 <fsm_mode+0x150>
			{
				mode = INC_RED;
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <fsm_mode+0x160>)
 8000b64:	220d      	movs	r2, #13
 8000b66:	601a      	str	r2, [r3, #0]
				count_val++;
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <fsm_mode+0x16c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a35      	ldr	r2, [pc, #212]	; (8000c44 <fsm_mode+0x16c>)
 8000b70:	6013      	str	r3, [r2, #0]
			}
			break;
 8000b72:	e059      	b.n	8000c28 <fsm_mode+0x150>

		case MODE_3:
			if (isButtonPressed(BUTTON_1))
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fed7 	bl	8000928 <isButtonPressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <fsm_mode+0xae>
				mode = MODE_4;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <fsm_mode+0x160>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]

			LEDsBlink();
 8000b86:	f7ff fe7b 	bl	8000880 <LEDsBlink>

			count_val = AMBER / 100;
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <fsm_mode+0x170>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2c      	ldr	r2, [pc, #176]	; (8000c40 <fsm_mode+0x168>)
 8000b90:	fb82 1203 	smull	r1, r2, r2, r3
 8000b94:	1152      	asrs	r2, r2, #5
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <fsm_mode+0x16c>)
 8000b9c:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000b9e:	f7ff fb81 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff fec0 	bl	8000928 <isButtonPressed>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d03e      	beq.n	8000c2c <fsm_mode+0x154>
			{
				mode = INC_AMBER;
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <fsm_mode+0x160>)
 8000bb0:	220e      	movs	r2, #14
 8000bb2:	601a      	str	r2, [r3, #0]
				count_val++;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <fsm_mode+0x16c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <fsm_mode+0x16c>)
 8000bbc:	6013      	str	r3, [r2, #0]
			}
			break;
 8000bbe:	e035      	b.n	8000c2c <fsm_mode+0x154>

		case MODE_4:
			if (isButtonPressed(BUTTON_1))
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff feb1 	bl	8000928 <isButtonPressed>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00e      	beq.n	8000bea <fsm_mode+0x112>
			{
				mode = MODE_1;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <fsm_mode+0x160>)
 8000bce:	2209      	movs	r2, #9
 8000bd0:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <fsm_mode+0x164>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f9f5 	bl	8000fc8 <setTimer>
				setTimer(1, GREEN);
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <fsm_mode+0x174>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4619      	mov	r1, r3
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 f9ef 	bl	8000fc8 <setTimer>
			}

			LEDsBlink();
 8000bea:	f7ff fe49 	bl	8000880 <LEDsBlink>

			count_val = GREEN / 100;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <fsm_mode+0x174>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <fsm_mode+0x168>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1152      	asrs	r2, r2, #5
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <fsm_mode+0x16c>)
 8000c00:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000c02:	f7ff fb4f 	bl	80002a4 <updateBufferForIncVal>

			if (isButtonPressed(BUTTON_2))
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fe8e 	bl	8000928 <isButtonPressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00e      	beq.n	8000c30 <fsm_mode+0x158>
			{
				mode = INC_GREEN;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <fsm_mode+0x160>)
 8000c14:	220f      	movs	r2, #15
 8000c16:	601a      	str	r2, [r3, #0]
				count_val++;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <fsm_mode+0x16c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <fsm_mode+0x16c>)
 8000c20:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c22:	e005      	b.n	8000c30 <fsm_mode+0x158>

		default:
			break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <fsm_mode+0x15a>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <fsm_mode+0x15a>
			break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <fsm_mode+0x15a>
			break;
 8000c30:	bf00      	nop
	}
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000048 	.word	0x20000048
 8000c3c:	2000004c 	.word	0x2000004c
 8000c40:	51eb851f 	.word	0x51eb851f
 8000c44:	20000098 	.word	0x20000098
 8000c48:	20000050 	.word	0x20000050
 8000c4c:	20000054 	.word	0x20000054

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fab4 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f896 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 f91c 	bl	8000e98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c60:	f000 f8ce 	bl	8000e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c64:	4841      	ldr	r0, [pc, #260]	; (8000d6c <main+0x11c>)
 8000c66:	f001 f9f1 	bl	800204c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Turn off all 7SEG_LEDs
  HAL_GPIO_WritePin(GPIOA, 0xF00, SEG_OFF);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c70:	483f      	ldr	r0, [pc, #252]	; (8000d70 <main+0x120>)
 8000c72:	f000 fda6 	bl	80017c2 <HAL_GPIO_WritePin>

  setTimer(0, RED);
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <main+0x124>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f9a3 	bl	8000fc8 <setTimer>
  setTimer(1, GREEN);
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <main+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4619      	mov	r1, r3
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 f99d 	bl	8000fc8 <setTimer>
  setTimer(2, SEG_Switch);
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <main+0x12c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	2002      	movs	r0, #2
 8000c96:	f000 f997 	bl	8000fc8 <setTimer>
  setTimer(3, LED_Blink);
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <main+0x130>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f991 	bl	8000fc8 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_mode();
 8000ca6:	f7ff ff17 	bl	8000ad8 <fsm_mode>
	  fsmIncVal();
 8000caa:	f7ff fb3d 	bl	8000328 <fsmIncVal>
	  if(IsTimerUp(2))
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 f976 	bl	8000fa0 <IsTimerUp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f5      	beq.n	8000ca6 <main+0x56>
	  {
		  HAL_GPIO_WritePin(GPIOA, 0xF00, SEG_OFF);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <main+0x120>)
 8000cc2:	f000 fd7e 	bl	80017c2 <HAL_GPIO_WritePin>
		  switch (seg_index)
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <main+0x134>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d83e      	bhi.n	8000d4c <main+0xfc>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <main+0x84>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce5 	.word	0x08000ce5
 8000cd8:	08000cff 	.word	0x08000cff
 8000cdc:	08000d19 	.word	0x08000d19
 8000ce0:	08000d33 	.word	0x08000d33
		  {
		  	  case 0: // 1st 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SEG_ON);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cea:	4821      	ldr	r0, [pc, #132]	; (8000d70 <main+0x120>)
 8000cec:	f000 fd69 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en1_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <main+0x120>)
 8000cf8:	f000 fd63 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  break;
 8000cfc:	e027      	b.n	8000d4e <main+0xfe>
		  	  case 1: // 2nd 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SEG_ON);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <main+0x120>)
 8000d06:	f000 fd5c 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <main+0x120>)
 8000d12:	f000 fd56 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  break;
 8000d16:	e01a      	b.n	8000d4e <main+0xfe>
		  	  case 2: // 3rd 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SEG_ON);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <main+0x120>)
 8000d20:	f000 fd4f 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en3_Pin, SEG_OFF);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0x120>)
 8000d2c:	f000 fd49 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  break;
 8000d30:	e00d      	b.n	8000d4e <main+0xfe>
		  	  case 3: // 4th 7SEG_LEDs
		  		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SEG_ON);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <main+0x120>)
 8000d3a:	f000 fd42 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en2_Pin, SEG_OFF);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <main+0x120>)
 8000d46:	f000 fd3c 	bl	80017c2 <HAL_GPIO_WritePin>
		  		  break;
 8000d4a:	e000      	b.n	8000d4e <main+0xfe>
		  	  default:
		  		  break;
 8000d4c:	bf00      	nop
		  }
		  // Display 7SEG_LEDs
		  update7SEG(seg_index++);
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <main+0x134>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	490b      	ldr	r1, [pc, #44]	; (8000d84 <main+0x134>)
 8000d56:	600a      	str	r2, [r1, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa0b 	bl	8000174 <update7SEG>

		  // Set switching time
		  setTimer(2, SEG_Switch);
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <main+0x12c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2002      	movs	r0, #2
 8000d66:	f000 f92f 	bl	8000fc8 <setTimer>
	  fsm_mode();
 8000d6a:	e79c      	b.n	8000ca6 <main+0x56>
 8000d6c:	200000c0 	.word	0x200000c0
 8000d70:	40010800 	.word	0x40010800
 8000d74:	2000004c 	.word	0x2000004c
 8000d78:	20000054 	.word	0x20000054
 8000d7c:	20000064 	.word	0x20000064
 8000d80:	20000068 	.word	0x20000068
 8000d84:	20000094 	.word	0x20000094

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd14 	bl	80027c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2310      	movs	r3, #16
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd18 	bl	80017f4 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dca:	f000 f8d3 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ff84 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df2:	f000 f8bf 	bl	8000f74 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3740      	adds	r7, #64	; 0x40
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e34:	2209      	movs	r2, #9
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e46:	f001 f8b1 	bl	8001fac <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e50:	f000 f890 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e62:	f001 fa47 	bl	80022f4 <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 f882 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e7e:	f001 fc13 	bl	80026a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f874 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000c0 	.word	0x200000c0

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000ee4:	f000 fc6d 	bl	80017c2 <HAL_GPIO_WritePin>
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, g_Pin|f_Pin|e_Pin|d_Pin
 8000ee8:	2200      	movs	r2, #0
 8000eea:	217f      	movs	r1, #127	; 0x7f
 8000eec:	481a      	ldr	r0, [pc, #104]	; (8000f58 <MX_GPIO_Init+0xc0>)
 8000eee:	f000 fc68 	bl	80017c2 <HAL_GPIO_WritePin>
                          |c_Pin|b_Pin|a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin amber1_Pin green1_Pin red2_Pin
                           amber2_Pin green2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000ef2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ef6:	60bb      	str	r3, [r7, #8]
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000f0c:	f000 fac8 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : g_Pin f_Pin e_Pin d_Pin
                           c_Pin b_Pin a_Pin */
  GPIO_InitStruct.Pin = g_Pin|f_Pin|e_Pin|d_Pin
 8000f10:	237f      	movs	r3, #127	; 0x7f
 8000f12:	60bb      	str	r3, [r7, #8]
                          |c_Pin|b_Pin|a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4619      	mov	r1, r3
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_GPIO_Init+0xc0>)
 8000f28:	f000 faba 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000f2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000f42:	f000 faad 	bl	80014a0 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f64:	f000 f848 	bl	8000ff8 <timerRun>
	getKeyInput();
 8000f68:	f7ff fcf8 	bl	800095c <getKeyInput>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <Current_Timer_Counter>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int Current_Timer_Counter(int timer)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <Current_Timer_Counter+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000108 	.word	0x20000108

08000fa0 <IsTimerUp>:

int IsTimerUp(int timer)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <IsTimerUp+0x24>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000118 	.word	0x20000118

08000fc8 <setTimer>:

void setTimer(int timer, int duration)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 8000fd2:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <setTimer+0x28>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <setTimer+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000108 	.word	0x20000108
 8000ff4:	20000118 	.word	0x20000118

08000ff8 <timerRun>:
void timerRun()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e01c      	b.n	800103e <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <timerRun+0x58>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dd13      	ble.n	8001038 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <timerRun+0x58>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	490d      	ldr	r1, [pc, #52]	; (8001050 <timerRun+0x58>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <timerRun+0x58>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <timerRun+0x40>
				timer_flag[timer] = 1;
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <timerRun+0x5c>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2101      	movs	r1, #1
 8001034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b03      	cmp	r3, #3
 8001042:	dddf      	ble.n	8001004 <timerRun+0xc>
		}
	}
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000108 	.word	0x20000108
 8001054:	20000118 	.word	0x20000118

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_MspInit+0x5c>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_MspInit+0x5c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_MspInit+0x5c>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x5c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x5c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x5c>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_MspInit+0x60>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_MspInit+0x60>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d113      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 f9a1 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 f9ba 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114a:	f000 f87f 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM2_IRQHandler+0x10>)
 800115a:	f000 ffc3 	bl	80020e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000c0 	.word	0x200000c0

08001168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff fff8 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117a:	490c      	ldr	r1, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001190:	4c09      	ldr	r4, [pc, #36]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f001 faed 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff fd55 	bl	8000c50 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011b0:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 80011b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011b8:	2000012c 	.word	0x2000012c

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f923 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff ff3c 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f93b 	bl	8001486 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f903 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000006c 	.word	0x2000006c
 8001244:	20000074 	.word	0x20000074
 8001248:	20000070 	.word	0x20000070

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000074 	.word	0x20000074
 800126c:	20000128 	.word	0x20000128

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000128 	.word	0x20000128

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	; (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff2d 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff42 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff35 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	e148      	b.n	8001746 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b4:	2201      	movs	r2, #1
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8137 	bne.w	8001740 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4aa3      	ldr	r2, [pc, #652]	; (8001764 <HAL_GPIO_Init+0x2c4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d05e      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014dc:	4aa1      	ldr	r2, [pc, #644]	; (8001764 <HAL_GPIO_Init+0x2c4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d875      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014e2:	4aa1      	ldr	r2, [pc, #644]	; (8001768 <HAL_GPIO_Init+0x2c8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d058      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014e8:	4a9f      	ldr	r2, [pc, #636]	; (8001768 <HAL_GPIO_Init+0x2c8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d86f      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014ee:	4a9f      	ldr	r2, [pc, #636]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d052      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014f4:	4a9d      	ldr	r2, [pc, #628]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d869      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014fa:	4a9d      	ldr	r2, [pc, #628]	; (8001770 <HAL_GPIO_Init+0x2d0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d04c      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 8001500:	4a9b      	ldr	r2, [pc, #620]	; (8001770 <HAL_GPIO_Init+0x2d0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d863      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 8001506:	4a9b      	ldr	r2, [pc, #620]	; (8001774 <HAL_GPIO_Init+0x2d4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d046      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 800150c:	4a99      	ldr	r2, [pc, #612]	; (8001774 <HAL_GPIO_Init+0x2d4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d85d      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d82a      	bhi.n	800156c <HAL_GPIO_Init+0xcc>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d859      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <HAL_GPIO_Init+0x80>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	0800159b 	.word	0x0800159b
 8001524:	08001575 	.word	0x08001575
 8001528:	08001587 	.word	0x08001587
 800152c:	080015c9 	.word	0x080015c9
 8001530:	080015cf 	.word	0x080015cf
 8001534:	080015cf 	.word	0x080015cf
 8001538:	080015cf 	.word	0x080015cf
 800153c:	080015cf 	.word	0x080015cf
 8001540:	080015cf 	.word	0x080015cf
 8001544:	080015cf 	.word	0x080015cf
 8001548:	080015cf 	.word	0x080015cf
 800154c:	080015cf 	.word	0x080015cf
 8001550:	080015cf 	.word	0x080015cf
 8001554:	080015cf 	.word	0x080015cf
 8001558:	080015cf 	.word	0x080015cf
 800155c:	080015cf 	.word	0x080015cf
 8001560:	080015cf 	.word	0x080015cf
 8001564:	0800157d 	.word	0x0800157d
 8001568:	08001591 	.word	0x08001591
 800156c:	4a82      	ldr	r2, [pc, #520]	; (8001778 <HAL_GPIO_Init+0x2d8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001572:	e02c      	b.n	80015ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e029      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	3304      	adds	r3, #4
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e024      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	3308      	adds	r3, #8
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e01f      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	330c      	adds	r3, #12
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e01a      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a2:	2304      	movs	r3, #4
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e013      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b0:	2308      	movs	r3, #8
 80015b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	611a      	str	r2, [r3, #16]
          break;
 80015ba:	e009      	b.n	80015d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	615a      	str	r2, [r3, #20]
          break;
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          break;
 80015ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d801      	bhi.n	80015da <HAL_GPIO_Init+0x13a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	e001      	b.n	80015de <HAL_GPIO_Init+0x13e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2bff      	cmp	r3, #255	; 0xff
 80015e4:	d802      	bhi.n	80015ec <HAL_GPIO_Init+0x14c>
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x152>
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3b08      	subs	r3, #8
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	210f      	movs	r1, #15
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	6a39      	ldr	r1, [r7, #32]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8090 	beq.w	8001740 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_GPIO_Init+0x2dc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_GPIO_Init+0x2dc>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_GPIO_Init+0x2dc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001638:	4a51      	ldr	r2, [pc, #324]	; (8001780 <HAL_GPIO_Init+0x2e0>)
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a49      	ldr	r2, [pc, #292]	; (8001784 <HAL_GPIO_Init+0x2e4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1e0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x2e8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1dc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a47      	ldr	r2, [pc, #284]	; (800178c <HAL_GPIO_Init+0x2ec>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1d8>
 8001674:	2302      	movs	r3, #2
 8001676:	e004      	b.n	8001682 <HAL_GPIO_Init+0x1e2>
 8001678:	2303      	movs	r3, #3
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x1e2>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_GPIO_Init+0x1e2>
 8001680:	2300      	movs	r3, #0
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	f002 0203 	and.w	r2, r2, #3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4093      	lsls	r3, r2
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001692:	493b      	ldr	r1, [pc, #236]	; (8001780 <HAL_GPIO_Init+0x2e0>)
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4937      	ldr	r1, [pc, #220]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4933      	ldr	r1, [pc, #204]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	492d      	ldr	r1, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4929      	ldr	r1, [pc, #164]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4923      	ldr	r1, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	491f      	ldr	r1, [pc, #124]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001714:	4013      	ands	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4919      	ldr	r1, [pc, #100]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4915      	ldr	r1, [pc, #84]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 800173c:	4013      	ands	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3301      	adds	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f aeaf 	bne.w	80014b4 <HAL_GPIO_Init+0x14>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	372c      	adds	r7, #44	; 0x2c
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	10320000 	.word	0x10320000
 8001768:	10310000 	.word	0x10310000
 800176c:	10220000 	.word	0x10220000
 8001770:	10210000 	.word	0x10210000
 8001774:	10120000 	.word	0x10120000
 8001778:	10110000 	.word	0x10110000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	807b      	strh	r3, [r7, #2]
 80017ce:	4613      	mov	r3, r2
 80017d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d2:	787b      	ldrb	r3, [r7, #1]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	041a      	lsls	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e26c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
 800182c:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x12c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e246      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x76>
 800185c:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b7b      	ldr	r3, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xbc>
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a71      	ldr	r2, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6e      	ldr	r2, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fcce 	bl	8001270 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fcca 	bl	8001270 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1fa      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fcba 	bl	8001270 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fcb6 	bl	8001270 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1e6      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x10c>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
 8001946:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1ba      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4939      	ldr	r1, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fc6f 	bl	8001270 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fc6b 	bl	8001270 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e19b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4927      	ldr	r1, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc4e 	bl	8001270 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc4a 	bl	8001270 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e17a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fc2e 	bl	8001270 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e15a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 fa9a 	bl	8001f70 <RCC_Delay>
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc14 	bl	8001270 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc10 	bl	8001270 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e140      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	42420000 	.word	0x42420000
 8001a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e9      	bne.n	8001a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a6 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b97      	ldr	r3, [pc, #604]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a93      	ldr	r2, [pc, #588]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fbd1 	bl	8001270 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff fbcd 	bl	8001270 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	; 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0fd      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a7a      	ldr	r2, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02d      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b0e:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a75      	ldr	r2, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a72      	ldr	r2, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	e01c      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x356>
 8001b30:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a6c      	ldr	r2, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a69      	ldr	r2, [pc, #420]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a66      	ldr	r2, [pc, #408]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb81 	bl	8001270 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fb7d 	bl	8001270 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0ab      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCC_OscConfig+0x37e>
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb6b 	bl	8001270 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fb67 	bl	8001270 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e095      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8081 	beq.w	8001cde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d061      	beq.n	8001cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d146      	bne.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_OscConfig+0x4fc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fb3b 	bl	8001270 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff fb37 	bl	8001270 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e067      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	492d      	ldr	r1, [pc, #180]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	4927      	ldr	r1, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x4fc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb0b 	bl	8001270 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb07 	bl	8001270 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e037      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46a>
 8001c7c:	e02f      	b.n	8001cde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_RCC_OscConfig+0x4fc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff faf4 	bl	8001270 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff faf0 	bl	8001270 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e020      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
 8001caa:	e018      	b.n	8001cde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e013      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42420060 	.word	0x42420060

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff fa44 	bl	8001270 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff fa40 	bl	8001270 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f9a2 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080027ec 	.word	0x080027ec
 8001ec0:	2000006c 	.word	0x2000006c
 8001ec4:	20000070 	.word	0x20000070

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x36>
 8001ef6:	e027      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	e027      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0c5b      	lsrs	r3, r3, #17
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	fb02 f203 	mul.w	r2, r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e004      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	693b      	ldr	r3, [r7, #16]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	080027fc 	.word	0x080027fc
 8001f68:	0800280c 	.word	0x0800280c
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <RCC_Delay+0x34>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <RCC_Delay+0x38>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a5b      	lsrs	r3, r3, #9
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f8c:	bf00      	nop
  }
  while (Delay --);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <RCC_Delay+0x1c>
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	2000006c 	.word	0x2000006c
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e041      	b.n	8002042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff f872 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f000 fa6e 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d001      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e035      	b.n	80020d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_TIM_Base_Start_IT+0x90>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_TIM_Base_Start_IT+0x4e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d004      	beq.n	800209a <HAL_TIM_Base_Start_IT+0x4e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d010      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020bc:	e007      	b.n	80020ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40000400 	.word	0x40000400

080020e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0202 	mvn.w	r2, #2
 8002110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9b4 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9a7 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9b6 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0204 	mvn.w	r2, #4
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f98a 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f97d 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f98c 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d122      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11b      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0208 	mvn.w	r2, #8
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2204      	movs	r2, #4
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f960 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f953 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f962 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d122      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b10      	cmp	r3, #16
 8002202:	d11b      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0210 	mvn.w	r2, #16
 800220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2208      	movs	r2, #8
 8002212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f936 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 8002228:	e005      	b.n	8002236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f929 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f938 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0201 	mvn.w	r2, #1
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fe7a 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b80      	cmp	r3, #128	; 0x80
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa6b 	bl	800276a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8fc 	bl	80024b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0220 	mvn.w	r2, #32
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa36 	bl	8002758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_TIM_ConfigClockSource+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e0b4      	b.n	800247a <HAL_TIM_ConfigClockSource+0x186>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800232e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002348:	d03e      	beq.n	80023c8 <HAL_TIM_ConfigClockSource+0xd4>
 800234a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234e:	f200 8087 	bhi.w	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	f000 8086 	beq.w	8002466 <HAL_TIM_ConfigClockSource+0x172>
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d87f      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b70      	cmp	r3, #112	; 0x70
 8002362:	d01a      	beq.n	800239a <HAL_TIM_ConfigClockSource+0xa6>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d87b      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b60      	cmp	r3, #96	; 0x60
 800236a:	d050      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x11a>
 800236c:	2b60      	cmp	r3, #96	; 0x60
 800236e:	d877      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b50      	cmp	r3, #80	; 0x50
 8002372:	d03c      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xfa>
 8002374:	2b50      	cmp	r3, #80	; 0x50
 8002376:	d873      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d058      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x13a>
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d86f      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b30      	cmp	r3, #48	; 0x30
 8002382:	d064      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b30      	cmp	r3, #48	; 0x30
 8002386:	d86b      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b20      	cmp	r3, #32
 800238a:	d060      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d867      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d05c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002394:	2b10      	cmp	r3, #16
 8002396:	d05a      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002398:	e062      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f000 f95e 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	609a      	str	r2, [r3, #8]
      break;
 80023c6:	e04f      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f000 f947 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ea:	609a      	str	r2, [r3, #8]
      break;
 80023ec:	e03c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 f8be 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2150      	movs	r1, #80	; 0x50
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f915 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800240c:	e02c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8dc 	bl	80025d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2160      	movs	r1, #96	; 0x60
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f905 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800242c:	e01c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f89e 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f8f5 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800244c:	e00c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f000 f8ec 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800245e:	e003      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e000      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a25      	ldr	r2, [pc, #148]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0x28>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0x28>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <TIM_Base_SetConfig+0xac>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x52>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x52>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <TIM_Base_SetConfig+0xac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 030a 	bic.w	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026bc:	2302      	movs	r3, #2
 80026be:	e041      	b.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d004      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10c      	bne.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4313      	orrs	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4d0c      	ldr	r5, [pc, #48]	; (80027b4 <__libc_init_array+0x38>)
 8002782:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	f000 f822 	bl	80027d4 <_init>
 8002790:	2600      	movs	r6, #0
 8002792:	4d0a      	ldr	r5, [pc, #40]	; (80027bc <__libc_init_array+0x40>)
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	08002810 	.word	0x08002810
 80027b8:	08002810 	.word	0x08002810
 80027bc:	08002810 	.word	0x08002810
 80027c0:	08002814 	.word	0x08002814

080027c4 <memset>:
 80027c4:	4603      	mov	r3, r0
 80027c6:	4402      	add	r2, r0
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	f803 1b01 	strb.w	r1, [r3], #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
