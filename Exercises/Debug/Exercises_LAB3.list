
Exercises_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d8  080025d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d8  080025d8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d8  080025d8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080025e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000006c  0800264c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800264c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009635  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c01  00000000  00000000  000296ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f4e  00000000  00000000  0002c640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf65  00000000  00000000  0004358e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082355  00000000  00000000  0004f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  000d189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800259c 	.word	0x0800259c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	0800259c 	.word	0x0800259c

0800014c <display7SEG>:
int seg_pin[] = {a_Pin, b_Pin, c_Pin, d_Pin, e_Pin, f_Pin, g_Pin};
int seg_config[10] = {0x01, 0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00, 0x04};
// Hexadecimal to Binary: 0x01->0x00000001, 0x4F->01001111, ...

void display7SEG(int num)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	GPIOB->ODR = seg_config[num];
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <display7SEG+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <display7SEG+0x24>)
 800015e:	60da      	str	r2, [r3, #12]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000000 	.word	0x20000000
 8000170:	40010c00 	.word	0x40010c00

08000174 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b03      	cmp	r3, #3
 8000180:	d82a      	bhi.n	80001d8 <update7SEG+0x64>
 8000182:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <update7SEG+0x14>)
 8000184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000188:	08000199 	.word	0x08000199
 800018c:	080001a9 	.word	0x080001a9
 8000190:	080001b9 	.word	0x080001b9
 8000194:	080001c9 	.word	0x080001c9
    switch (index)
    {
        case 0:
            //Display the first 7SEG with led_buffer[0]
    		display7SEG(led_buffer[index]);
 8000198:	4a15      	ldr	r2, [pc, #84]	; (80001f0 <update7SEG+0x7c>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f7ff ffd3 	bl	800014c <display7SEG>
            break;
 80001a6:	e018      	b.n	80001da <update7SEG+0x66>
        case 1:
            //Display the second 7SEG with led_buffer[1]
    		display7SEG(led_buffer[index]);
 80001a8:	4a11      	ldr	r2, [pc, #68]	; (80001f0 <update7SEG+0x7c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f7ff ffcb 	bl	800014c <display7SEG>
            break;
 80001b6:	e010      	b.n	80001da <update7SEG+0x66>
        case 2:
            //Display the third 7SEG with led_buffer[2]
    		display7SEG(led_buffer[index]);
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <update7SEG+0x7c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <display7SEG>
            break;
 80001c6:	e008      	b.n	80001da <update7SEG+0x66>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
    		display7SEG(led_buffer[index]);
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <update7SEG+0x7c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <display7SEG>
            break;
 80001d6:	e000      	b.n	80001da <update7SEG+0x66>
        default:
            break;
 80001d8:	bf00      	nop
    }
	if(seg_index >= 4) seg_index = 0;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <update7SEG+0x80>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	dd02      	ble.n	80001e8 <update7SEG+0x74>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <update7SEG+0x80>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000088 	.word	0x20000088

080001f8 <updateBufferForMode1>:

void updateBufferForMode1() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	// Display countdown value of the horizontal road
	led_buffer[0] = (CurrentCounter(0) / 1000) ;
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fda3 	bl	8000d48 <CurrentCounter>
 8000202:	4603      	mov	r3, r0
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <updateBufferForMode1+0x94>)
 8000206:	fb82 1203 	smull	r1, r2, r2, r3
 800020a:	1192      	asrs	r2, r2, #6
 800020c:	17db      	asrs	r3, r3, #31
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <updateBufferForMode1+0x98>)
 8000212:	6013      	str	r3, [r2, #0]
	led_buffer[1] = ((CurrentCounter(0) / 100) % 10);
 8000214:	2000      	movs	r0, #0
 8000216:	f000 fd97 	bl	8000d48 <CurrentCounter>
 800021a:	4603      	mov	r3, r0
 800021c:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <updateBufferForMode1+0x9c>)
 800021e:	fb82 1203 	smull	r1, r2, r2, r3
 8000222:	1152      	asrs	r2, r2, #5
 8000224:	17db      	asrs	r3, r3, #31
 8000226:	1ad1      	subs	r1, r2, r3
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <updateBufferForMode1+0xa0>)
 800022a:	fb83 2301 	smull	r2, r3, r3, r1
 800022e:	109a      	asrs	r2, r3, #2
 8000230:	17cb      	asrs	r3, r1, #31
 8000232:	1ad2      	subs	r2, r2, r3
 8000234:	4613      	mov	r3, r2
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	1aca      	subs	r2, r1, r3
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <updateBufferForMode1+0x98>)
 8000240:	605a      	str	r2, [r3, #4]
//	else if(CurrentCounter(0) % 100 != 0)
//	{
//		led_buffer[1] = ((CurrentCounter(0) / 100) % 10) + 1;
//	}
	// Display countdown value of the verticle road
	led_buffer[2] = (CurrentCounter(1) / 1000) ;
 8000242:	2001      	movs	r0, #1
 8000244:	f000 fd80 	bl	8000d48 <CurrentCounter>
 8000248:	4603      	mov	r3, r0
 800024a:	4a10      	ldr	r2, [pc, #64]	; (800028c <updateBufferForMode1+0x94>)
 800024c:	fb82 1203 	smull	r1, r2, r2, r3
 8000250:	1192      	asrs	r2, r2, #6
 8000252:	17db      	asrs	r3, r3, #31
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <updateBufferForMode1+0x98>)
 8000258:	6093      	str	r3, [r2, #8]
	led_buffer[3] = ((CurrentCounter(1) / 100) % 10);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fd74 	bl	8000d48 <CurrentCounter>
 8000260:	4603      	mov	r3, r0
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <updateBufferForMode1+0x9c>)
 8000264:	fb82 1203 	smull	r1, r2, r2, r3
 8000268:	1152      	asrs	r2, r2, #5
 800026a:	17db      	asrs	r3, r3, #31
 800026c:	1ad1      	subs	r1, r2, r3
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <updateBufferForMode1+0xa0>)
 8000270:	fb83 2301 	smull	r2, r3, r3, r1
 8000274:	109a      	asrs	r2, r3, #2
 8000276:	17cb      	asrs	r3, r1, #31
 8000278:	1ad2      	subs	r2, r2, r3
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	1aca      	subs	r2, r1, r3
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <updateBufferForMode1+0x98>)
 8000286:	60da      	str	r2, [r3, #12]
//	}
//	else if(CurrentCounter(1) % 100 != 0)
//	{
//		led_buffer[3] = ((CurrentCounter(1) / 100) % 10) + 1;
//	}
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	10624dd3 	.word	0x10624dd3
 8000290:	20000028 	.word	0x20000028
 8000294:	51eb851f 	.word	0x51eb851f
 8000298:	66666667 	.word	0x66666667

0800029c <updateBufferForIncVal>:

void updateBufferForIncVal()
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	led_buffer[2] = count_val / 10;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <updateBufferForIncVal+0x74>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <updateBufferForIncVal+0x78>)
 80002a6:	fb82 1203 	smull	r1, r2, r2, r3
 80002aa:	1092      	asrs	r2, r2, #2
 80002ac:	17db      	asrs	r3, r3, #31
 80002ae:	1ad3      	subs	r3, r2, r3
 80002b0:	4a19      	ldr	r2, [pc, #100]	; (8000318 <updateBufferForIncVal+0x7c>)
 80002b2:	6093      	str	r3, [r2, #8]
	led_buffer[3] = count_val % 10;
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <updateBufferForIncVal+0x74>)
 80002b6:	6819      	ldr	r1, [r3, #0]
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <updateBufferForIncVal+0x78>)
 80002ba:	fb83 2301 	smull	r2, r3, r3, r1
 80002be:	109a      	asrs	r2, r3, #2
 80002c0:	17cb      	asrs	r3, r1, #31
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	1aca      	subs	r2, r1, r3
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <updateBufferForIncVal+0x7c>)
 80002d0:	60da      	str	r2, [r3, #12]

	led_buffer[0] = 0;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <updateBufferForIncVal+0x7c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
	switch(mode)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <updateBufferForIncVal+0x80>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b0c      	cmp	r3, #12
 80002de:	d00e      	beq.n	80002fe <updateBufferForIncVal+0x62>
 80002e0:	2b0c      	cmp	r3, #12
 80002e2:	dc10      	bgt.n	8000306 <updateBufferForIncVal+0x6a>
 80002e4:	2b0a      	cmp	r3, #10
 80002e6:	d002      	beq.n	80002ee <updateBufferForIncVal+0x52>
 80002e8:	2b0b      	cmp	r3, #11
 80002ea:	d004      	beq.n	80002f6 <updateBufferForIncVal+0x5a>
			break;
		case MODE_4:
			led_buffer[1] = 4;
			break;
		default:
			break;
 80002ec:	e00b      	b.n	8000306 <updateBufferForIncVal+0x6a>
			led_buffer[1] = 2;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <updateBufferForIncVal+0x7c>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	605a      	str	r2, [r3, #4]
			break;
 80002f4:	e008      	b.n	8000308 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 3;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <updateBufferForIncVal+0x7c>)
 80002f8:	2203      	movs	r2, #3
 80002fa:	605a      	str	r2, [r3, #4]
			break;
 80002fc:	e004      	b.n	8000308 <updateBufferForIncVal+0x6c>
			led_buffer[1] = 4;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <updateBufferForIncVal+0x7c>)
 8000300:	2204      	movs	r2, #4
 8000302:	605a      	str	r2, [r3, #4]
			break;
 8000304:	e000      	b.n	8000308 <updateBufferForIncVal+0x6c>
			break;
 8000306:	bf00      	nop
	}
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	2000008c 	.word	0x2000008c
 8000314:	66666667 	.word	0x66666667
 8000318:	20000028 	.word	0x20000028
 800031c:	20000048 	.word	0x20000048

08000320 <fsmIncVal>:

void fsmIncVal()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	switch (mode)
 8000324:	4b35      	ldr	r3, [pc, #212]	; (80003fc <fsmIncVal+0xdc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b0d      	cmp	r3, #13
 800032a:	d002      	beq.n	8000332 <fsmIncVal+0x12>
 800032c:	2b0e      	cmp	r3, #14
 800032e:	d030      	beq.n	8000392 <fsmIncVal+0x72>
//				if (count_val > 99) count_val = 0;
//				count_val++;
//			}
//			break;
		default:
			break;
 8000330:	e062      	b.n	80003f8 <fsmIncVal+0xd8>
			LEDsBlink();
 8000332:	f000 f98f 	bl	8000654 <LEDsBlink>
			updateBufferForIncVal();
 8000336:	f7ff ffb1 	bl	800029c <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f9de 	bl	80006fc <isButtonPressed>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <fsmIncVal+0x2c>
				mode = MODE_3;
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <fsmIncVal+0xdc>)
 8000348:	220b      	movs	r2, #11
 800034a:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 800034c:	2002      	movs	r0, #2
 800034e:	f000 f9d5 	bl	80006fc <isButtonPressed>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <fsmIncVal+0x4c>
				mode = MODE_2;
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <fsmIncVal+0xdc>)
 800035a:	220a      	movs	r2, #10
 800035c:	601a      	str	r2, [r3, #0]
				RED = count_val * 100;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <fsmIncVal+0xe0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2264      	movs	r2, #100	; 0x64
 8000364:	fb02 f303 	mul.w	r3, r2, r3
 8000368:	4a26      	ldr	r2, [pc, #152]	; (8000404 <fsmIncVal+0xe4>)
 800036a:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 800036c:	2001      	movs	r0, #1
 800036e:	f000 f9c5 	bl	80006fc <isButtonPressed>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d03c      	beq.n	80003f2 <fsmIncVal+0xd2>
				if (count_val > 99) count_val = 0;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <fsmIncVal+0xe0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b63      	cmp	r3, #99	; 0x63
 800037e:	dd02      	ble.n	8000386 <fsmIncVal+0x66>
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <fsmIncVal+0xe0>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
				count_val++;
 8000386:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <fsmIncVal+0xe0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <fsmIncVal+0xe0>)
 800038e:	6013      	str	r3, [r2, #0]
			break;
 8000390:	e02f      	b.n	80003f2 <fsmIncVal+0xd2>
			LEDsBlink();
 8000392:	f000 f95f 	bl	8000654 <LEDsBlink>
			updateBufferForIncVal();
 8000396:	f7ff ff81 	bl	800029c <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_1))
 800039a:	2000      	movs	r0, #0
 800039c:	f000 f9ae 	bl	80006fc <isButtonPressed>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <fsmIncVal+0x8c>
				mode = MODE_4;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <fsmIncVal+0xdc>)
 80003a8:	220c      	movs	r2, #12
 80003aa:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3))
 80003ac:	2002      	movs	r0, #2
 80003ae:	f000 f9a5 	bl	80006fc <isButtonPressed>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d009      	beq.n	80003cc <fsmIncVal+0xac>
				mode = MODE_3;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <fsmIncVal+0xdc>)
 80003ba:	220b      	movs	r2, #11
 80003bc:	601a      	str	r2, [r3, #0]
				AMBER = count_val * 100;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <fsmIncVal+0xe0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2264      	movs	r2, #100	; 0x64
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <fsmIncVal+0xe8>)
 80003ca:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2))
 80003cc:	2001      	movs	r0, #1
 80003ce:	f000 f995 	bl	80006fc <isButtonPressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00e      	beq.n	80003f6 <fsmIncVal+0xd6>
				if (count_val > 99) count_val = 0;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <fsmIncVal+0xe0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b63      	cmp	r3, #99	; 0x63
 80003de:	dd02      	ble.n	80003e6 <fsmIncVal+0xc6>
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <fsmIncVal+0xe0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
				count_val++;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <fsmIncVal+0xe0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <fsmIncVal+0xe0>)
 80003ee:	6013      	str	r3, [r2, #0]
			break;
 80003f0:	e001      	b.n	80003f6 <fsmIncVal+0xd6>
			break;
 80003f2:	bf00      	nop
 80003f4:	e000      	b.n	80003f8 <fsmIncVal+0xd8>
			break;
 80003f6:	bf00      	nop
	}
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000048 	.word	0x20000048
 8000400:	2000008c 	.word	0x2000008c
 8000404:	2000004c 	.word	0x2000004c
 8000408:	20000050 	.word	0x20000050

0800040c <fsm_Hori_LEDs>:
int Hori_Status = AUTO_INIT;
int Verti_Status = AUTO_INIT;
GPIO_PinState Blink_Status = LED_ON;

void fsm_Hori_LEDs()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	switch(Hori_Status)
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <fsm_Hori_LEDs+0xac>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b10      	subs	r3, #16
 8000416:	2b03      	cmp	r3, #3
 8000418:	d844      	bhi.n	80004a4 <fsm_Hori_LEDs+0x98>
 800041a:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <fsm_Hori_LEDs+0x14>)
 800041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000420:	08000431 	.word	0x08000431
 8000424:	08000445 	.word	0x08000445
 8000428:	08000485 	.word	0x08000485
 800042c:	08000465 	.word	0x08000465
	{
		case AUTO_INIT:
			Hori_Status = AUTO_RED;
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <fsm_Hori_LEDs+0xac>)
 8000432:	2211      	movs	r2, #17
 8000434:	601a      	str	r2, [r3, #0]
			setTimer(0, RED);
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <fsm_Hori_LEDs+0xb0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4619      	mov	r1, r3
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fca7 	bl	8000d90 <setTimer>
			break;
 8000442:	e036      	b.n	80004b2 <fsm_Hori_LEDs+0xa6>

		case AUTO_RED:
			if (IsTimerUp(0))
 8000444:	2000      	movs	r0, #0
 8000446:	f000 fc8f 	bl	8000d68 <IsTimerUp>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d02b      	beq.n	80004a8 <fsm_Hori_LEDs+0x9c>
			{
				Hori_Status = AUTO_GREEN;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <fsm_Hori_LEDs+0xac>)
 8000452:	2212      	movs	r2, #18
 8000454:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN);
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <fsm_Hori_LEDs+0xb4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4619      	mov	r1, r3
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fc97 	bl	8000d90 <setTimer>
			}

			break;
 8000462:	e021      	b.n	80004a8 <fsm_Hori_LEDs+0x9c>
		case AUTO_AMBER:
			if (IsTimerUp(0))
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fc7f 	bl	8000d68 <IsTimerUp>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d01d      	beq.n	80004ac <fsm_Hori_LEDs+0xa0>
			{
				Hori_Status = AUTO_RED;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <fsm_Hori_LEDs+0xac>)
 8000472:	2211      	movs	r2, #17
 8000474:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <fsm_Hori_LEDs+0xb0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4619      	mov	r1, r3
 800047c:	2000      	movs	r0, #0
 800047e:	f000 fc87 	bl	8000d90 <setTimer>
			}
			break;
 8000482:	e013      	b.n	80004ac <fsm_Hori_LEDs+0xa0>
		case AUTO_GREEN:
			if (IsTimerUp(0))
 8000484:	2000      	movs	r0, #0
 8000486:	f000 fc6f 	bl	8000d68 <IsTimerUp>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00f      	beq.n	80004b0 <fsm_Hori_LEDs+0xa4>
			{
				Hori_Status = AUTO_AMBER;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <fsm_Hori_LEDs+0xac>)
 8000492:	2213      	movs	r2, #19
 8000494:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER);
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <fsm_Hori_LEDs+0xb8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4619      	mov	r1, r3
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fc77 	bl	8000d90 <setTimer>
			}
			break;
 80004a2:	e005      	b.n	80004b0 <fsm_Hori_LEDs+0xa4>
		default:
			break;
 80004a4:	bf00      	nop
 80004a6:	e004      	b.n	80004b2 <fsm_Hori_LEDs+0xa6>
			break;
 80004a8:	bf00      	nop
 80004aa:	e002      	b.n	80004b2 <fsm_Hori_LEDs+0xa6>
			break;
 80004ac:	bf00      	nop
 80004ae:	e000      	b.n	80004b2 <fsm_Hori_LEDs+0xa6>
			break;
 80004b0:	bf00      	nop
	}
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000038 	.word	0x20000038
 80004bc:	2000004c 	.word	0x2000004c
 80004c0:	20000054 	.word	0x20000054
 80004c4:	20000050 	.word	0x20000050

080004c8 <fsm_Verti_LEDs>:

void fsm_Verti_LEDs()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	switch (Verti_Status)
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <fsm_Verti_LEDs+0xac>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b10      	subs	r3, #16
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d844      	bhi.n	8000560 <fsm_Verti_LEDs+0x98>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <fsm_Verti_LEDs+0x14>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004ed 	.word	0x080004ed
 80004e0:	08000501 	.word	0x08000501
 80004e4:	08000541 	.word	0x08000541
 80004e8:	08000521 	.word	0x08000521
	{
		case AUTO_INIT:
			Verti_Status = AUTO_GREEN;
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <fsm_Verti_LEDs+0xac>)
 80004ee:	2212      	movs	r2, #18
 80004f0:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN);
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <fsm_Verti_LEDs+0xb0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4619      	mov	r1, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fc49 	bl	8000d90 <setTimer>
			break;
 80004fe:	e036      	b.n	800056e <fsm_Verti_LEDs+0xa6>

		case AUTO_RED:
			if (IsTimerUp(1))
 8000500:	2001      	movs	r0, #1
 8000502:	f000 fc31 	bl	8000d68 <IsTimerUp>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d02b      	beq.n	8000564 <fsm_Verti_LEDs+0x9c>
			{
				Verti_Status = AUTO_GREEN;
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <fsm_Verti_LEDs+0xac>)
 800050e:	2212      	movs	r2, #18
 8000510:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN);
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <fsm_Verti_LEDs+0xb0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fc39 	bl	8000d90 <setTimer>
			}
			break;
 800051e:	e021      	b.n	8000564 <fsm_Verti_LEDs+0x9c>
		case AUTO_AMBER:
			if (IsTimerUp(1))
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fc21 	bl	8000d68 <IsTimerUp>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01d      	beq.n	8000568 <fsm_Verti_LEDs+0xa0>
			{
				Verti_Status = AUTO_RED;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <fsm_Verti_LEDs+0xac>)
 800052e:	2211      	movs	r2, #17
 8000530:	601a      	str	r2, [r3, #0]
				setTimer(1, RED);
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <fsm_Verti_LEDs+0xb4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fc29 	bl	8000d90 <setTimer>
			}
			break;
 800053e:	e013      	b.n	8000568 <fsm_Verti_LEDs+0xa0>
		case AUTO_GREEN:
			if (IsTimerUp(1))
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fc11 	bl	8000d68 <IsTimerUp>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00f      	beq.n	800056c <fsm_Verti_LEDs+0xa4>
			{
				Verti_Status = AUTO_AMBER;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <fsm_Verti_LEDs+0xac>)
 800054e:	2213      	movs	r2, #19
 8000550:	601a      	str	r2, [r3, #0]
				setTimer(1, AMBER);
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <fsm_Verti_LEDs+0xb8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4619      	mov	r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fc19 	bl	8000d90 <setTimer>
			}
			break;
 800055e:	e005      	b.n	800056c <fsm_Verti_LEDs+0xa4>
		default:
			break;
 8000560:	bf00      	nop
 8000562:	e004      	b.n	800056e <fsm_Verti_LEDs+0xa6>
			break;
 8000564:	bf00      	nop
 8000566:	e002      	b.n	800056e <fsm_Verti_LEDs+0xa6>
			break;
 8000568:	bf00      	nop
 800056a:	e000      	b.n	800056e <fsm_Verti_LEDs+0xa6>
			break;
 800056c:	bf00      	nop
	}
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000003c 	.word	0x2000003c
 8000578:	20000054 	.word	0x20000054
 800057c:	2000004c 	.word	0x2000004c
 8000580:	20000050 	.word	0x20000050

08000584 <LEDsDisplay>:

void LEDsDisplay()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	fsm_Hori_LEDs();
 8000588:	f7ff ff40 	bl	800040c <fsm_Hori_LEDs>
	fsm_Verti_LEDs();
 800058c:	f7ff ff9c 	bl	80004c8 <fsm_Verti_LEDs>

	switch (Hori_Status)
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <LEDsDisplay+0xc4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b13      	cmp	r3, #19
 8000596:	d011      	beq.n	80005bc <LEDsDisplay+0x38>
 8000598:	2b13      	cmp	r3, #19
 800059a:	dc25      	bgt.n	80005e8 <LEDsDisplay+0x64>
 800059c:	2b11      	cmp	r3, #17
 800059e:	d002      	beq.n	80005a6 <LEDsDisplay+0x22>
 80005a0:	2b12      	cmp	r3, #18
 80005a2:	d016      	beq.n	80005d2 <LEDsDisplay+0x4e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
			break;
		default:
			break;
 80005a4:	e020      	b.n	80005e8 <LEDsDisplay+0x64>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, LED_ON);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2104      	movs	r1, #4
 80005aa:	4828      	ldr	r0, [pc, #160]	; (800064c <LEDsDisplay+0xc8>)
 80005ac:	f000 ffed 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | green1_Pin, LED_OFF);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2118      	movs	r1, #24
 80005b4:	4825      	ldr	r0, [pc, #148]	; (800064c <LEDsDisplay+0xc8>)
 80005b6:	f000 ffe8 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80005ba:	e016      	b.n	80005ea <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(amber1_GPIO_Port, amber1_Pin, LED_ON);
 80005bc:	2201      	movs	r2, #1
 80005be:	2108      	movs	r1, #8
 80005c0:	4822      	ldr	r0, [pc, #136]	; (800064c <LEDsDisplay+0xc8>)
 80005c2:	f000 ffe2 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | green1_Pin, LED_OFF);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2114      	movs	r1, #20
 80005ca:	4820      	ldr	r0, [pc, #128]	; (800064c <LEDsDisplay+0xc8>)
 80005cc:	f000 ffdd 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80005d0:	e00b      	b.n	80005ea <LEDsDisplay+0x66>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, LED_ON);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2110      	movs	r1, #16
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <LEDsDisplay+0xc8>)
 80005d8:	f000 ffd7 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | amber1_Pin, LED_OFF);
 80005dc:	2200      	movs	r2, #0
 80005de:	210c      	movs	r1, #12
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <LEDsDisplay+0xc8>)
 80005e2:	f000 ffd2 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80005e6:	e000      	b.n	80005ea <LEDsDisplay+0x66>
			break;
 80005e8:	bf00      	nop
	}

	switch (Verti_Status)
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <LEDsDisplay+0xcc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b13      	cmp	r3, #19
 80005f0:	d011      	beq.n	8000616 <LEDsDisplay+0x92>
 80005f2:	2b13      	cmp	r3, #19
 80005f4:	dc25      	bgt.n	8000642 <LEDsDisplay+0xbe>
 80005f6:	2b11      	cmp	r3, #17
 80005f8:	d002      	beq.n	8000600 <LEDsDisplay+0x7c>
 80005fa:	2b12      	cmp	r3, #18
 80005fc:	d016      	beq.n	800062c <LEDsDisplay+0xa8>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
			break;
		default:
			break;
 80005fe:	e020      	b.n	8000642 <LEDsDisplay+0xbe>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, LED_ON);
 8000600:	2201      	movs	r2, #1
 8000602:	2120      	movs	r1, #32
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <LEDsDisplay+0xc8>)
 8000606:	f000 ffc0 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber2_Pin | green2_Pin, LED_OFF);
 800060a:	2200      	movs	r2, #0
 800060c:	21c0      	movs	r1, #192	; 0xc0
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <LEDsDisplay+0xc8>)
 8000610:	f000 ffbb 	bl	800158a <HAL_GPIO_WritePin>
			break;
 8000614:	e016      	b.n	8000644 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(amber2_GPIO_Port, amber2_Pin, LED_ON);
 8000616:	2201      	movs	r2, #1
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <LEDsDisplay+0xc8>)
 800061c:	f000 ffb5 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | green2_Pin, LED_OFF);
 8000620:	2200      	movs	r2, #0
 8000622:	21a0      	movs	r1, #160	; 0xa0
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <LEDsDisplay+0xc8>)
 8000626:	f000 ffb0 	bl	800158a <HAL_GPIO_WritePin>
			break;
 800062a:	e00b      	b.n	8000644 <LEDsDisplay+0xc0>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, LED_ON);
 800062c:	2201      	movs	r2, #1
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <LEDsDisplay+0xc8>)
 8000632:	f000 ffaa 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red2_Pin | amber2_Pin, LED_OFF);
 8000636:	2200      	movs	r2, #0
 8000638:	2160      	movs	r1, #96	; 0x60
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <LEDsDisplay+0xc8>)
 800063c:	f000 ffa5 	bl	800158a <HAL_GPIO_WritePin>
			break;
 8000640:	e000      	b.n	8000644 <LEDsDisplay+0xc0>
			break;
 8000642:	bf00      	nop
	}
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000038 	.word	0x20000038
 800064c:	40010800 	.word	0x40010800
 8000650:	2000003c 	.word	0x2000003c

08000654 <LEDsBlink>:

void LEDsBlink()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (IsTimerUp(3))
 8000658:	2003      	movs	r0, #3
 800065a:	f000 fb85 	bl	8000d68 <IsTimerUp>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00f      	beq.n	8000684 <LEDsBlink+0x30>
	{
		Blink_Status = !Blink_Status;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <LEDsBlink+0x98>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <LEDsBlink+0x98>)
 8000676:	701a      	strb	r2, [r3, #0]
		setTimer(3, LED_Blink);
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <LEDsBlink+0x9c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	2003      	movs	r0, #3
 8000680:	f000 fb86 	bl	8000d90 <setTimer>
	}
	switch(mode)
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <LEDsBlink+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b0c      	cmp	r3, #12
 800068a:	d020      	beq.n	80006ce <LEDsBlink+0x7a>
 800068c:	2b0c      	cmp	r3, #12
 800068e:	dc2b      	bgt.n	80006e8 <LEDsBlink+0x94>
 8000690:	2b0a      	cmp	r3, #10
 8000692:	d002      	beq.n	800069a <LEDsBlink+0x46>
 8000694:	2b0b      	cmp	r3, #11
 8000696:	d00d      	beq.n	80006b4 <LEDsBlink+0x60>
		case MODE_4:
			HAL_GPIO_WritePin(GPIOA, green1_Pin | green2_Pin, Blink_Status);
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | amber1_Pin | amber2_Pin, LED_OFF);
			break;
	}
}
 8000698:	e026      	b.n	80006e8 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin, Blink_Status);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <LEDsBlink+0x98>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	2124      	movs	r1, #36	; 0x24
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <LEDsBlink+0xa4>)
 80006a4:	f000 ff71 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin | green1_Pin | green2_Pin, LED_OFF);
 80006a8:	2200      	movs	r2, #0
 80006aa:	21d8      	movs	r1, #216	; 0xd8
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <LEDsBlink+0xa4>)
 80006ae:	f000 ff6c 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80006b2:	e019      	b.n	80006e8 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, amber1_Pin | amber2_Pin, Blink_Status);
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <LEDsBlink+0x98>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	2148      	movs	r1, #72	; 0x48
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <LEDsBlink+0xa4>)
 80006be:	f000 ff64 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | green1_Pin | green2_Pin, LED_OFF);
 80006c2:	2200      	movs	r2, #0
 80006c4:	21b4      	movs	r1, #180	; 0xb4
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LEDsBlink+0xa4>)
 80006c8:	f000 ff5f 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80006cc:	e00c      	b.n	80006e8 <LEDsBlink+0x94>
			HAL_GPIO_WritePin(GPIOA, green1_Pin | green2_Pin, Blink_Status);
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <LEDsBlink+0x98>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	2190      	movs	r1, #144	; 0x90
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <LEDsBlink+0xa4>)
 80006d8:	f000 ff57 	bl	800158a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, red1_Pin | red2_Pin | amber1_Pin | amber2_Pin, LED_OFF);
 80006dc:	2200      	movs	r2, #0
 80006de:	216c      	movs	r1, #108	; 0x6c
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <LEDsBlink+0xa4>)
 80006e2:	f000 ff52 	bl	800158a <HAL_GPIO_WritePin>
			break;
 80006e6:	bf00      	nop
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000040 	.word	0x20000040
 80006f0:	2000005c 	.word	0x2000005c
 80006f4:	20000048 	.word	0x20000048
 80006f8:	40010800 	.word	0x40010800

080006fc <isButtonPressed>:

int button_flag[BUTTONS];
GPIO_PinState KeyReg[BUTTONS][4];
int TimeOutForKeyPress[BUTTONS];

int isButtonPressed(int button){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(button_flag[button] == 1){
 8000704:	4a09      	ldr	r2, [pc, #36]	; (800072c <isButtonPressed+0x30>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d106      	bne.n	800071e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <isButtonPressed+0x30>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2100      	movs	r1, #0
 8000716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <isButtonPressed+0x24>
	}
	return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c

08000730 <getKeyInput>:

void getKeyInput(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	for(int button = 0; button < BUTTONS; button++)
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	e0a4      	b.n	8000886 <getKeyInput+0x156>
	{
		KeyReg[button][0] = KeyReg[button][1];
 800073c:	4a56      	ldr	r2, [pc, #344]	; (8000898 <getKeyInput+0x168>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	7859      	ldrb	r1, [r3, #1]
 8000746:	4a54      	ldr	r2, [pc, #336]	; (8000898 <getKeyInput+0x168>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		KeyReg[button][1] = KeyReg[button][2];
 800074e:	4a52      	ldr	r2, [pc, #328]	; (8000898 <getKeyInput+0x168>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	7899      	ldrb	r1, [r3, #2]
 8000758:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <getKeyInput+0x168>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	460a      	mov	r2, r1
 8000762:	705a      	strb	r2, [r3, #1]
		switch(button)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d025      	beq.n	80007b6 <getKeyInput+0x86>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b02      	cmp	r3, #2
 800076e:	dc30      	bgt.n	80007d2 <getKeyInput+0xa2>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <getKeyInput+0x4e>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d00e      	beq.n	800079a <getKeyInput+0x6a>
				break;
			case BUTTON_3:
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 800077c:	e029      	b.n	80007d2 <getKeyInput+0xa2>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	4846      	ldr	r0, [pc, #280]	; (800089c <getKeyInput+0x16c>)
 8000784:	f000 feea 	bl	800155c <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	4619      	mov	r1, r3
 800078c:	4a42      	ldr	r2, [pc, #264]	; (8000898 <getKeyInput+0x168>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	460a      	mov	r2, r1
 8000796:	709a      	strb	r2, [r3, #2]
				break;
 8000798:	e01c      	b.n	80007d4 <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	483f      	ldr	r0, [pc, #252]	; (800089c <getKeyInput+0x16c>)
 80007a0:	f000 fedc 	bl	800155c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <getKeyInput+0x168>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	709a      	strb	r2, [r3, #2]
				break;
 80007b4:	e00e      	b.n	80007d4 <getKeyInput+0xa4>
				KeyReg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80007b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ba:	4838      	ldr	r0, [pc, #224]	; (800089c <getKeyInput+0x16c>)
 80007bc:	f000 fece 	bl	800155c <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <getKeyInput+0x168>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	709a      	strb	r2, [r3, #2]
				break;
 80007d0:	e000      	b.n	80007d4 <getKeyInput+0xa4>
				break;
 80007d2:	bf00      	nop
		}
		if((KeyReg[button][1] == KeyReg[button][0]) && (KeyReg[button][2] == KeyReg[button][1]))
 80007d4:	4a30      	ldr	r2, [pc, #192]	; (8000898 <getKeyInput+0x168>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	785a      	ldrb	r2, [r3, #1]
 80007de:	492e      	ldr	r1, [pc, #184]	; (8000898 <getKeyInput+0x168>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d14a      	bne.n	8000880 <getKeyInput+0x150>
 80007ea:	4a2b      	ldr	r2, [pc, #172]	; (8000898 <getKeyInput+0x168>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	789a      	ldrb	r2, [r3, #2]
 80007f4:	4928      	ldr	r1, [pc, #160]	; (8000898 <getKeyInput+0x168>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	785b      	ldrb	r3, [r3, #1]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d13e      	bne.n	8000880 <getKeyInput+0x150>
		{
			if (KeyReg[button][3] != KeyReg[button][2])
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <getKeyInput+0x168>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	78da      	ldrb	r2, [r3, #3]
 800080c:	4922      	ldr	r1, [pc, #136]	; (8000898 <getKeyInput+0x168>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	789b      	ldrb	r3, [r3, #2]
 8000816:	429a      	cmp	r2, r3
 8000818:	d01d      	beq.n	8000856 <getKeyInput+0x126>
			{
				KeyReg[button][3] = KeyReg[button][2];
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <getKeyInput+0x168>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	7899      	ldrb	r1, [r3, #2]
 8000824:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <getKeyInput+0x168>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	460a      	mov	r2, r1
 800082e:	70da      	strb	r2, [r3, #3]

				if (KeyReg[button][2] == PRESSED_STATE)
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <getKeyInput+0x168>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d120      	bne.n	8000880 <getKeyInput+0x150>
				{
					button_flag[button] = 1;
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <getKeyInput+0x170>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2101      	movs	r1, #1
 8000844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimeOutForKeyPress[button] = counterKeyPress;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <getKeyInput+0x174>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4916      	ldr	r1, [pc, #88]	; (80008a8 <getKeyInput+0x178>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000854:	e014      	b.n	8000880 <getKeyInput+0x150>
				}
			}
			else
			{
				TimeOutForKeyPress[button]--;
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <getKeyInput+0x178>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4911      	ldr	r1, [pc, #68]	; (80008a8 <getKeyInput+0x178>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[button] == 0)
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <getKeyInput+0x178>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <getKeyInput+0x150>
				{
					KeyReg[button][3] = NORMAL_STATE;
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <getKeyInput+0x168>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	2201      	movs	r2, #1
 800087e:	70da      	strb	r2, [r3, #3]
	for(int button = 0; button < BUTTONS; button++)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b02      	cmp	r3, #2
 800088a:	f77f af57 	ble.w	800073c <getKeyInput+0xc>
				}
			}
		}
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000a8 	.word	0x200000a8
 800089c:	40010800 	.word	0x40010800
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	20000044 	.word	0x20000044
 80008a8:	20000090 	.word	0x20000090

080008ac <fsm_mode>:
 */

#include "fsm_mode.h"

void fsm_mode()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch(mode)
 80008b0:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <fsm_mode+0x160>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b08      	subs	r3, #8
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	f200 809e 	bhi.w	80009f8 <fsm_mode+0x14c>
 80008bc:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <fsm_mode+0x18>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008d9 	.word	0x080008d9
 80008c8:	080008e1 	.word	0x080008e1
 80008cc:	080008fd 	.word	0x080008fd
 80008d0:	08000949 	.word	0x08000949
 80008d4:	08000995 	.word	0x08000995
	{
		case MODE_INIT:
			mode = MODE_1;
 80008d8:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <fsm_mode+0x160>)
 80008da:	2209      	movs	r2, #9
 80008dc:	601a      	str	r2, [r3, #0]
			break;
 80008de:	e092      	b.n	8000a06 <fsm_mode+0x15a>
		case MODE_1:
			if (isButtonPressed(BUTTON_1))
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff0b 	bl	80006fc <isButtonPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <fsm_mode+0x46>
				mode = MODE_2;
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <fsm_mode+0x160>)
 80008ee:	220a      	movs	r2, #10
 80008f0:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 80008f2:	f7ff fe47 	bl	8000584 <LEDsDisplay>
			updateBufferForMode1();
 80008f6:	f7ff fc7f 	bl	80001f8 <updateBufferForMode1>
			break;
 80008fa:	e084      	b.n	8000a06 <fsm_mode+0x15a>
		case MODE_2:
			if (isButtonPressed(BUTTON_1))
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fefd 	bl	80006fc <isButtonPressed>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <fsm_mode+0x62>
				mode = MODE_3;
 8000908:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <fsm_mode+0x160>)
 800090a:	220b      	movs	r2, #11
 800090c:	601a      	str	r2, [r3, #0]
			LEDsBlink();
 800090e:	f7ff fea1 	bl	8000654 <LEDsBlink>
			count_val = RED / 100;
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <fsm_mode+0x164>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <fsm_mode+0x168>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1152      	asrs	r2, r2, #5
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4a3d      	ldr	r2, [pc, #244]	; (8000a18 <fsm_mode+0x16c>)
 8000924:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000926:	f7ff fcb9 	bl	800029c <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_2))
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fee6 	bl	80006fc <isButtonPressed>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d062      	beq.n	80009fc <fsm_mode+0x150>
			{
				mode = INC_RED;
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <fsm_mode+0x160>)
 8000938:	220d      	movs	r2, #13
 800093a:	601a      	str	r2, [r3, #0]
				count_val++;
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <fsm_mode+0x16c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a35      	ldr	r2, [pc, #212]	; (8000a18 <fsm_mode+0x16c>)
 8000944:	6013      	str	r3, [r2, #0]
			}
			break;
 8000946:	e059      	b.n	80009fc <fsm_mode+0x150>
		case MODE_3:
			if (isButtonPressed(BUTTON_1))
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fed7 	bl	80006fc <isButtonPressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <fsm_mode+0xae>
				mode = MODE_4;
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <fsm_mode+0x160>)
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
			LEDsBlink();
 800095a:	f7ff fe7b 	bl	8000654 <LEDsBlink>
			count_val = AMBER / 100;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <fsm_mode+0x170>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <fsm_mode+0x168>)
 8000964:	fb82 1203 	smull	r1, r2, r2, r3
 8000968:	1152      	asrs	r2, r2, #5
 800096a:	17db      	asrs	r3, r3, #31
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	4a2a      	ldr	r2, [pc, #168]	; (8000a18 <fsm_mode+0x16c>)
 8000970:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 8000972:	f7ff fc93 	bl	800029c <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_2))
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fec0 	bl	80006fc <isButtonPressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d03e      	beq.n	8000a00 <fsm_mode+0x154>
			{
				mode = INC_AMBER;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <fsm_mode+0x160>)
 8000984:	220e      	movs	r2, #14
 8000986:	601a      	str	r2, [r3, #0]
				count_val++;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <fsm_mode+0x16c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <fsm_mode+0x16c>)
 8000990:	6013      	str	r3, [r2, #0]
			}
			break;
 8000992:	e035      	b.n	8000a00 <fsm_mode+0x154>
		case MODE_4:
			if (isButtonPressed(BUTTON_1))
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff feb1 	bl	80006fc <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00e      	beq.n	80009be <fsm_mode+0x112>
			{
				mode = MODE_1;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <fsm_mode+0x160>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	601a      	str	r2, [r3, #0]
				setTimer(0, RED);
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <fsm_mode+0x164>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f9ef 	bl	8000d90 <setTimer>
				setTimer(1, GREEN);
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <fsm_mode+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2001      	movs	r0, #1
 80009ba:	f000 f9e9 	bl	8000d90 <setTimer>
			}
			LEDsBlink();
 80009be:	f7ff fe49 	bl	8000654 <LEDsBlink>
			count_val = GREEN / 100;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <fsm_mode+0x174>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <fsm_mode+0x168>)
 80009c8:	fb82 1203 	smull	r1, r2, r2, r3
 80009cc:	1152      	asrs	r2, r2, #5
 80009ce:	17db      	asrs	r3, r3, #31
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <fsm_mode+0x16c>)
 80009d4:	6013      	str	r3, [r2, #0]
			updateBufferForIncVal();
 80009d6:	f7ff fc61 	bl	800029c <updateBufferForIncVal>
			if (isButtonPressed(BUTTON_2))
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fe8e 	bl	80006fc <isButtonPressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00e      	beq.n	8000a04 <fsm_mode+0x158>
			{
				mode = INC_GREEN;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <fsm_mode+0x160>)
 80009e8:	220f      	movs	r2, #15
 80009ea:	601a      	str	r2, [r3, #0]
				count_val++;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <fsm_mode+0x16c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <fsm_mode+0x16c>)
 80009f4:	6013      	str	r3, [r2, #0]
			}
			break;
 80009f6:	e005      	b.n	8000a04 <fsm_mode+0x158>

		default:
			break;
 80009f8:	bf00      	nop
 80009fa:	e004      	b.n	8000a06 <fsm_mode+0x15a>
			break;
 80009fc:	bf00      	nop
 80009fe:	e002      	b.n	8000a06 <fsm_mode+0x15a>
			break;
 8000a00:	bf00      	nop
 8000a02:	e000      	b.n	8000a06 <fsm_mode+0x15a>
			break;
 8000a04:	bf00      	nop
	}
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000048 	.word	0x20000048
 8000a10:	2000004c 	.word	0x2000004c
 8000a14:	51eb851f 	.word	0x51eb851f
 8000a18:	2000008c 	.word	0x2000008c
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	20000054 	.word	0x20000054

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 faae 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f890 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f916 	bl	8000c60 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a34:	f000 f8c8 	bl	8000bc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a38:	483e      	ldr	r0, [pc, #248]	; (8000b34 <main+0x110>)
 8000a3a:	f001 f9eb 	bl	8001e14 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer(0, RED);
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <main+0x114>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 f9a3 	bl	8000d90 <setTimer>
  setTimer(1, GREEN);
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <main+0x118>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 f99d 	bl	8000d90 <setTimer>
  setTimer(2, SEG_Switch);
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <main+0x11c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f000 f997 	bl	8000d90 <setTimer>
  setTimer(3, LED_Blink);
 8000a62:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <main+0x120>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f991 	bl	8000d90 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_mode();
 8000a6e:	f7ff ff1d 	bl	80008ac <fsm_mode>
	  fsmIncVal();
 8000a72:	f7ff fc55 	bl	8000320 <fsmIncVal>
	  if (IsTimerUp(2))
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 f976 	bl	8000d68 <IsTimerUp>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f5      	beq.n	8000a6e <main+0x4a>
	  {
		  // Turn off all 7seg LEDs
		  HAL_GPIO_WritePin(GPIOA, 0xF00, SEG_OFF);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000a88:	482f      	ldr	r0, [pc, #188]	; (8000b48 <main+0x124>)
 8000a8a:	f000 fd7e 	bl	800158a <HAL_GPIO_WritePin>
		  switch (seg_index) {
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <main+0x128>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d83e      	bhi.n	8000b14 <main+0xf0>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <main+0x78>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000ac7 	.word	0x08000ac7
 8000aa4:	08000ae1 	.word	0x08000ae1
 8000aa8:	08000afb 	.word	0x08000afb
		  	  case 0:
		  		  // Choose 1st 7seg to display
		  		  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SEG_ON);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4825      	ldr	r0, [pc, #148]	; (8000b48 <main+0x124>)
 8000ab4:	f000 fd69 	bl	800158a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en1_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000abe:	4822      	ldr	r0, [pc, #136]	; (8000b48 <main+0x124>)
 8000ac0:	f000 fd63 	bl	800158a <HAL_GPIO_WritePin>
		  		  break;
 8000ac4:	e027      	b.n	8000b16 <main+0xf2>
		  	  case 1:
		  		  // Choose 2nd 7seg to display
		  		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SEG_ON);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000acc:	481e      	ldr	r0, [pc, #120]	; (8000b48 <main+0x124>)
 8000ace:	f000 fd5c 	bl	800158a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en2_Pin | en3_Pin, SEG_OFF);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <main+0x124>)
 8000ada:	f000 fd56 	bl	800158a <HAL_GPIO_WritePin>
		  		  break;
 8000ade:	e01a      	b.n	8000b16 <main+0xf2>
		  	  case 2:
		  		  // Choose 3rd 7seg to display
		  		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SEG_ON);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <main+0x124>)
 8000ae8:	f000 fd4f 	bl	800158a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en3_Pin, SEG_OFF);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <main+0x124>)
 8000af4:	f000 fd49 	bl	800158a <HAL_GPIO_WritePin>
		  		  break;
 8000af8:	e00d      	b.n	8000b16 <main+0xf2>
		  	  case 3:
		  		  // Choose 4th 7seg to display
		  		  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SEG_ON);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <main+0x124>)
 8000b02:	f000 fd42 	bl	800158a <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, en0_Pin | en1_Pin | en2_Pin, SEG_OFF);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b0c:	480e      	ldr	r0, [pc, #56]	; (8000b48 <main+0x124>)
 8000b0e:	f000 fd3c 	bl	800158a <HAL_GPIO_WritePin>
		  		  break;
 8000b12:	e000      	b.n	8000b16 <main+0xf2>
		  	  default:
		  		  break;
 8000b14:	bf00      	nop
		  }

		  // Display the 7seg LED
		  update7SEG(seg_index++);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <main+0x128>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	490b      	ldr	r1, [pc, #44]	; (8000b4c <main+0x128>)
 8000b1e:	600a      	str	r2, [r1, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb27 	bl	8000174 <update7SEG>

		  // Set timer for switching
		  setTimer(2, SEG_Switch);
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <main+0x11c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f000 f92f 	bl	8000d90 <setTimer>
	  fsm_mode();
 8000b32:	e79c      	b.n	8000a6e <main+0x4a>
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	2000004c 	.word	0x2000004c
 8000b3c:	20000054 	.word	0x20000054
 8000b40:	20000058 	.word	0x20000058
 8000b44:	2000005c 	.word	0x2000005c
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	20000088 	.word	0x20000088

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2228      	movs	r2, #40	; 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fd14 	bl	800258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fd18 	bl	80015bc <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b92:	f000 f8d3 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 ff84 	bl	8001abc <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bba:	f000 f8bf 	bl	8000d3c <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3740      	adds	r7, #64	; 0x40
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bfc:	2209      	movs	r2, #9
 8000bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c0e:	f001 f8b1 	bl	8001d74 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c18:	f000 f890 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c2a:	f001 fa47 	bl	80020bc <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c34:	f000 f882 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c46:	f001 fc13 	bl	8002470 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f874 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000b4 	.word	0x200000b4

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_GPIO_Init+0xb8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xbc>)
 8000cac:	f000 fc6d 	bl	800158a <HAL_GPIO_WritePin>
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, g_Pin|f_Pin|e_Pin|d_Pin
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	217f      	movs	r1, #127	; 0x7f
 8000cb4:	481a      	ldr	r0, [pc, #104]	; (8000d20 <MX_GPIO_Init+0xc0>)
 8000cb6:	f000 fc68 	bl	800158a <HAL_GPIO_WritePin>
                          |c_Pin|b_Pin|a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin amber1_Pin green1_Pin red2_Pin
                           amber2_Pin green2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red1_Pin|amber1_Pin|green1_Pin|red2_Pin
 8000cba:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000cbe:	60bb      	str	r3, [r7, #8]
                          |amber2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MX_GPIO_Init+0xbc>)
 8000cd4:	f000 fac8 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : g_Pin f_Pin e_Pin d_Pin
                           c_Pin b_Pin a_Pin */
  GPIO_InitStruct.Pin = g_Pin|f_Pin|e_Pin|d_Pin
 8000cd8:	237f      	movs	r3, #127	; 0x7f
 8000cda:	60bb      	str	r3, [r7, #8]
                          |c_Pin|b_Pin|a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_GPIO_Init+0xc0>)
 8000cf0:	f000 faba 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000cf4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_GPIO_Init+0xbc>)
 8000d0a:	f000 faad 	bl	8001268 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d2c:	f000 f848 	bl	8000dc0 <timerRun>
	getKeyInput();
 8000d30:	f7ff fcfe 	bl	8000730 <getKeyInput>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <CurrentCounter>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int CurrentCounter(int timer)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <CurrentCounter+0x1c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000fc 	.word	0x200000fc

08000d68 <IsTimerUp>:

int IsTimerUp(int timer)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <IsTimerUp+0x24>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	2000010c 	.word	0x2000010c

08000d90 <setTimer>:

void setTimer(int timer, int duration)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 8000d9a:	4907      	ldr	r1, [pc, #28]	; (8000db8 <setTimer+0x28>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8000da4:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <setTimer+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2100      	movs	r1, #0
 8000daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200000fc 	.word	0x200000fc
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <timerRun>:
void timerRun()
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	e01c      	b.n	8000e06 <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <timerRun+0x58>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd13      	ble.n	8000e00 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <timerRun+0x58>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <timerRun+0x58>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <timerRun+0x58>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d104      	bne.n	8000e00 <timerRun+0x40>
			{
				timer_flag[timer] = 1;
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <timerRun+0x5c>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	dddf      	ble.n	8000dcc <timerRun+0xc>
			}
		}
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	200000fc 	.word	0x200000fc
 8000e1c:	2000010c 	.word	0x2000010c

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d113      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f000 f9a1 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb8:	201c      	movs	r0, #28
 8000eba:	f000 f9ba 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f87f 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM2_IRQHandler+0x10>)
 8000f22:	f000 ffc3 	bl	8001eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000b4 	.word	0x200000b4

08000f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f3c:	f7ff fff8 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f42:	490c      	ldr	r1, [pc, #48]	; (8000f74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f58:	4c09      	ldr	r4, [pc, #36]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f001 faed 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6a:	f7ff fd5b 	bl	8000a24 <main>
  bx lr
 8000f6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f78:	080025e0 	.word	0x080025e0
  ldr r2, =_sbss
 8000f7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f80:	20000120 	.word	0x20000120

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x28>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x28>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f923 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff ff3c 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f93b 	bl	800124e <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f000 f903 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000060 	.word	0x20000060
 800100c:	20000068 	.word	0x20000068
 8001010:	20000064 	.word	0x20000064

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x20>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000068 	.word	0x20000068
 8001034:	2000011c 	.word	0x2000011c

08001038 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <HAL_GetTick+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	2000011c 	.word	0x2000011c

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <__NVIC_EnableIRQ+0x34>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff90 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff2d 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff42 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff35 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e148      	b.n	800150e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800127c:	2201      	movs	r2, #1
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8137 	bne.w	8001508 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4aa3      	ldr	r2, [pc, #652]	; (800152c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d05e      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012a4:	4aa1      	ldr	r2, [pc, #644]	; (800152c <HAL_GPIO_Init+0x2c4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d875      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012aa:	4aa1      	ldr	r2, [pc, #644]	; (8001530 <HAL_GPIO_Init+0x2c8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d058      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012b0:	4a9f      	ldr	r2, [pc, #636]	; (8001530 <HAL_GPIO_Init+0x2c8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d86f      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012b6:	4a9f      	ldr	r2, [pc, #636]	; (8001534 <HAL_GPIO_Init+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d052      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012bc:	4a9d      	ldr	r2, [pc, #628]	; (8001534 <HAL_GPIO_Init+0x2cc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d869      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012c2:	4a9d      	ldr	r2, [pc, #628]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d04c      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012c8:	4a9b      	ldr	r2, [pc, #620]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d863      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012ce:	4a9b      	ldr	r2, [pc, #620]	; (800153c <HAL_GPIO_Init+0x2d4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d046      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012d4:	4a99      	ldr	r2, [pc, #612]	; (800153c <HAL_GPIO_Init+0x2d4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d85d      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d82a      	bhi.n	8001334 <HAL_GPIO_Init+0xcc>
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d859      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_GPIO_Init+0x80>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001363 	.word	0x08001363
 80012ec:	0800133d 	.word	0x0800133d
 80012f0:	0800134f 	.word	0x0800134f
 80012f4:	08001391 	.word	0x08001391
 80012f8:	08001397 	.word	0x08001397
 80012fc:	08001397 	.word	0x08001397
 8001300:	08001397 	.word	0x08001397
 8001304:	08001397 	.word	0x08001397
 8001308:	08001397 	.word	0x08001397
 800130c:	08001397 	.word	0x08001397
 8001310:	08001397 	.word	0x08001397
 8001314:	08001397 	.word	0x08001397
 8001318:	08001397 	.word	0x08001397
 800131c:	08001397 	.word	0x08001397
 8001320:	08001397 	.word	0x08001397
 8001324:	08001397 	.word	0x08001397
 8001328:	08001397 	.word	0x08001397
 800132c:	08001345 	.word	0x08001345
 8001330:	08001359 	.word	0x08001359
 8001334:	4a82      	ldr	r2, [pc, #520]	; (8001540 <HAL_GPIO_Init+0x2d8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133a:	e02c      	b.n	8001396 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e029      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	3304      	adds	r3, #4
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e024      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	3308      	adds	r3, #8
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e01f      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	330c      	adds	r3, #12
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e01a      	b.n	8001398 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136a:	2304      	movs	r3, #4
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e013      	b.n	8001398 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	611a      	str	r2, [r3, #16]
          break;
 8001382:	e009      	b.n	8001398 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001384:	2308      	movs	r3, #8
 8001386:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	615a      	str	r2, [r3, #20]
          break;
 800138e:	e003      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
          break;
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x130>
          break;
 8001396:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d801      	bhi.n	80013a2 <HAL_GPIO_Init+0x13a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	e001      	b.n	80013a6 <HAL_GPIO_Init+0x13e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3304      	adds	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d802      	bhi.n	80013b4 <HAL_GPIO_Init+0x14c>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x152>
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3b08      	subs	r3, #8
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	210f      	movs	r1, #15
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	6a39      	ldr	r1, [r7, #32]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8090 	beq.w	8001508 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e8:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_GPIO_Init+0x2dc>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_GPIO_Init+0x2dc>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x2dc>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x2e0>)
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a49      	ldr	r2, [pc, #292]	; (800154c <HAL_GPIO_Init+0x2e4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1e0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1d8>
 800143c:	2302      	movs	r3, #2
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1e2>
 8001440:	2303      	movs	r3, #3
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1e2>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1e2>
 8001448:	2300      	movs	r3, #0
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145a:	493b      	ldr	r1, [pc, #236]	; (8001548 <HAL_GPIO_Init+0x2e0>)
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4937      	ldr	r1, [pc, #220]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4933      	ldr	r1, [pc, #204]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 800148c:	4013      	ands	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	492d      	ldr	r1, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4929      	ldr	r1, [pc, #164]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4923      	ldr	r1, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	491f      	ldr	r1, [pc, #124]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4919      	ldr	r1, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	4915      	ldr	r1, [pc, #84]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001504:	4013      	ands	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3301      	adds	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f aeaf 	bne.w	800127c <HAL_GPIO_Init+0x14>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	372c      	adds	r7, #44	; 0x2c
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	10320000 	.word	0x10320000
 8001530:	10310000 	.word	0x10310000
 8001534:	10220000 	.word	0x10220000
 8001538:	10210000 	.word	0x10210000
 800153c:	10120000 	.word	0x10120000
 8001540:	10110000 	.word	0x10110000
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	40010800 	.word	0x40010800
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40011000 	.word	0x40011000
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]
 8001596:	4613      	mov	r3, r2
 8001598:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159a:	787b      	ldrb	r3, [r7, #1]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015a6:	e003      	b.n	80015b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e26c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8087 	beq.w	80016ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	4b8f      	ldr	r3, [pc, #572]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x12c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d168      	bne.n	80016e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e246      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x76>
 8001624:	4b80      	ldr	r3, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7f      	ldr	r2, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e02e      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a77      	ldr	r2, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0xbc>
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a71      	ldr	r2, [pc, #452]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcce 	bl	8001038 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcca 	bl	8001038 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1fa      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe4>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fcba 	bl	8001038 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fcb6 	bl	8001038 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1e6      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x10c>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1ba      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fc6f 	bl	8001038 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc6b 	bl	8001038 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e19b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc4e 	bl	8001038 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc4a 	bl	8001038 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e17a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03a      	beq.n	8001840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc2e 	bl	8001038 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc2a 	bl	8001038 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e15a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 fa9a 	bl	8001d38 <RCC_Delay>
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fc14 	bl	8001038 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fc10 	bl	8001038 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d908      	bls.n	8001834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e140      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	42420000 	.word	0x42420000
 8001830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e9      	bne.n	8001814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a6 	beq.w	800199a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a93      	ldr	r2, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a8a      	ldr	r2, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fbd1 	bl	8001038 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fbcd 	bl	8001038 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0fd      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018c0:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a7a      	ldr	r2, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x334>
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x356>
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a6c      	ldr	r2, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a66      	ldr	r2, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb81 	bl	8001038 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fb7d 	bl	8001038 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0ab      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x37e>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb6b 	bl	8001038 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fb67 	bl	8001038 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e095      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8081 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d061      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d146      	bne.n	8001a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb3b 	bl	8001038 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fb37 	bl	8001038 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e067      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a19      	ldr	r1, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	430b      	orrs	r3, r1
 8001a12:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb0b 	bl	8001038 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff fb07 	bl	8001038 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e037      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
 8001a44:	e02f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff faf4 	bl	8001038 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff faf0 	bl	8001038 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e020      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x498>
 8001a72:	e018      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e013      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	42420060 	.word	0x42420060

08001abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e073      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e053      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4922      	ldr	r1, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9a2 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	080025b4 	.word	0x080025b4
 8001c88:	20000060 	.word	0x20000060
 8001c8c:	20000064 	.word	0x20000064

08001c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d002      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cbe:	e027      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc2:	613b      	str	r3, [r7, #16]
      break;
 8001cc4:	e027      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d010      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0c5b      	lsrs	r3, r3, #17
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	fb02 f203 	mul.w	r2, r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e004      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d12:	613b      	str	r3, [r7, #16]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	693b      	ldr	r3, [r7, #16]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	080025c4 	.word	0x080025c4
 8001d30:	080025d4 	.word	0x080025d4
 8001d34:	003d0900 	.word	0x003d0900

08001d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <RCC_Delay+0x34>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <RCC_Delay+0x38>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d54:	bf00      	nop
  }
  while (Delay --);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <RCC_Delay+0x1c>
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000060 	.word	0x20000060
 8001d70:	10624dd3 	.word	0x10624dd3

08001d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e041      	b.n	8001e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f872 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 fa6e 	bl	8002294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e035      	b.n	8001e98 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_TIM_Base_Start_IT+0x90>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0x4e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d004      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0x4e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_TIM_Base_Start_IT+0x94>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d111      	bne.n	8001e86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d010      	beq.n	8001e96 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	e007      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40000400 	.word	0x40000400

08001eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0202 	mvn.w	r2, #2
 8001ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f9b4 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f9a7 	bl	800224a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f9b6 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0204 	mvn.w	r2, #4
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f98a 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f97d 	bl	800224a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f98c 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0208 	mvn.w	r2, #8
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f960 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f953 	bl	800224a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f962 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0210 	mvn.w	r2, #16
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f936 	bl	800225c <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f929 	bl	800224a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f938 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0201 	mvn.w	r2, #1
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fe7a 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa6b 	bl	8002532 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8fc 	bl	8002280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b20      	cmp	r3, #32
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa36 	bl	8002520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_TIM_ConfigClockSource+0x1c>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0b4      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x186>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002110:	d03e      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xd4>
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	f200 8087 	bhi.w	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 800211a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211e:	f000 8086 	beq.w	800222e <HAL_TIM_ConfigClockSource+0x172>
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002126:	d87f      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002128:	2b70      	cmp	r3, #112	; 0x70
 800212a:	d01a      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0xa6>
 800212c:	2b70      	cmp	r3, #112	; 0x70
 800212e:	d87b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002130:	2b60      	cmp	r3, #96	; 0x60
 8002132:	d050      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002134:	2b60      	cmp	r3, #96	; 0x60
 8002136:	d877      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002138:	2b50      	cmp	r3, #80	; 0x50
 800213a:	d03c      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xfa>
 800213c:	2b50      	cmp	r3, #80	; 0x50
 800213e:	d873      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d058      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d86f      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002148:	2b30      	cmp	r3, #48	; 0x30
 800214a:	d064      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x15a>
 800214c:	2b30      	cmp	r3, #48	; 0x30
 800214e:	d86b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002150:	2b20      	cmp	r3, #32
 8002152:	d060      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x15a>
 8002154:	2b20      	cmp	r3, #32
 8002156:	d867      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05c      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x15a>
 800215c:	2b10      	cmp	r3, #16
 800215e:	d05a      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x15a>
 8002160:	e062      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f000 f95e 	bl	8002432 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	609a      	str	r2, [r3, #8]
      break;
 800218e:	e04f      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f000 f947 	bl	8002432 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b2:	609a      	str	r2, [r3, #8]
      break;
 80021b4:	e03c      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 f8be 	bl	8002344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2150      	movs	r1, #80	; 0x50
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f915 	bl	80023fe <TIM_ITRx_SetConfig>
      break;
 80021d4:	e02c      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f000 f8dc 	bl	80023a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2160      	movs	r1, #96	; 0x60
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f905 	bl	80023fe <TIM_ITRx_SetConfig>
      break;
 80021f4:	e01c      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	f000 f89e 	bl	8002344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f8f5 	bl	80023fe <TIM_ITRx_SetConfig>
      break;
 8002214:	e00c      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f000 f8ec 	bl	80023fe <TIM_ITRx_SetConfig>
      break;
 8002226:	e003      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e000      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800222e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a25      	ldr	r2, [pc, #148]	; (800233c <TIM_Base_SetConfig+0xa8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <TIM_Base_SetConfig+0x28>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0x28>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <TIM_Base_SetConfig+0xac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <TIM_Base_SetConfig+0xa8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <TIM_Base_SetConfig+0x52>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022dc:	d003      	beq.n	80022e6 <TIM_Base_SetConfig+0x52>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a17      	ldr	r2, [pc, #92]	; (8002340 <TIM_Base_SetConfig+0xac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <TIM_Base_SetConfig+0xa8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d103      	bne.n	800232c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	615a      	str	r2, [r3, #20]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40000400 	.word	0x40000400

08002344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f023 0201 	bic.w	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f023 030a 	bic.w	r3, r3, #10
 8002380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0210 	bic.w	r2, r3, #16
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	031b      	lsls	r3, r3, #12
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	f043 0307 	orr.w	r3, r3, #7
 8002420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002432:	b480      	push	{r7}
 8002434:	b087      	sub	sp, #28
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	021a      	lsls	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4313      	orrs	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	609a      	str	r2, [r3, #8]
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002484:	2302      	movs	r3, #2
 8002486:	e041      	b.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a14      	ldr	r2, [pc, #80]	; (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d004      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10c      	bne.n	80024fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400

08002520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	2600      	movs	r6, #0
 8002548:	4d0c      	ldr	r5, [pc, #48]	; (800257c <__libc_init_array+0x38>)
 800254a:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254c:	1b64      	subs	r4, r4, r5
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	42a6      	cmp	r6, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	f000 f822 	bl	800259c <_init>
 8002558:	2600      	movs	r6, #0
 800255a:	4d0a      	ldr	r5, [pc, #40]	; (8002584 <__libc_init_array+0x40>)
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <__libc_init_array+0x44>)
 800255e:	1b64      	subs	r4, r4, r5
 8002560:	10a4      	asrs	r4, r4, #2
 8002562:	42a6      	cmp	r6, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f855 3b04 	ldr.w	r3, [r5], #4
 800256c:	4798      	blx	r3
 800256e:	3601      	adds	r6, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f855 3b04 	ldr.w	r3, [r5], #4
 8002576:	4798      	blx	r3
 8002578:	3601      	adds	r6, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025d8 	.word	0x080025d8
 8002580:	080025d8 	.word	0x080025d8
 8002584:	080025d8 	.word	0x080025d8
 8002588:	080025dc 	.word	0x080025dc

0800258c <memset>:
 800258c:	4603      	mov	r3, r0
 800258e:	4402      	add	r2, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
